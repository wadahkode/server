"use strict";
var Firebase = Object.create(null);
Firebase.date = new Date();
Firebase.seconds = Firebase.date.getMilliseconds();
Firebase = function (app) {
    Firebase.auth = app.auth();
    Firebase.db = app.database();
    return Firebase;
};
Firebase.findAll = function (tableName) {
    var ref = Firebase.db.ref(tableName);
    return new Promise(function (resolve, reject) {
        setTimeout(function () {
            ref.on('value', function (snapshot) { return resolve(snapshot); }, function (error) { return reject(true); });
        }, Firebase.seconds);
    });
};
Firebase.signInWithEmailAndPassword = function (tableName, params) {
    var auth = Firebase.auth;
    var ref = Firebase.db.ref(tableName);
    var email = params[0], password = params[1];
    return auth.signInWithEmailAndPassword(email, password);
};
module.exports = Firebase;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlyZWJhc2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZGF0YWJhc2VzL2ZpcmViYXNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFNQSxJQUFJLFFBQVEsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ25DLFFBQVEsQ0FBQyxJQUFJLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQztBQUMzQixRQUFRLENBQUMsT0FBTyxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7QUFFbkQsUUFBUSxHQUFHLFVBQUMsR0FBaUI7SUFDM0IsUUFBUSxDQUFDLElBQUksR0FBRyxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDM0IsUUFBUSxDQUFDLEVBQUUsR0FBRyxHQUFHLENBQUMsUUFBUSxFQUFFLENBQUM7SUFFN0IsT0FBTyxRQUFRLENBQUM7QUFDbEIsQ0FBQyxDQUFDO0FBT0YsUUFBUSxDQUFDLE9BQU8sR0FBRyxVQUFDLFNBQWlCO0lBQ25DLElBQU0sR0FBRyxHQUFRLFFBQVEsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBRTVDLE9BQU8sSUFBSSxPQUFPLENBQUMsVUFBQyxPQUFPLEVBQUUsTUFBTTtRQUNqQyxVQUFVLENBQUM7WUFDVCxHQUFHLENBQUMsRUFBRSxDQUNKLE9BQU8sRUFDUCxVQUFDLFFBQWEsSUFBSyxPQUFBLE9BQU8sQ0FBQyxRQUFRLENBQUMsRUFBakIsQ0FBaUIsRUFDcEMsVUFBQyxLQUFVLElBQUssT0FBQSxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQVosQ0FBWSxDQUM3QixDQUFDO1FBQ0osQ0FBQyxFQUFFLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUN2QixDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQztBQU9GLFFBQVEsQ0FBQywwQkFBMEIsR0FBRyxVQUNwQyxTQUFpQixFQUNqQixNQUFxQjtJQUVyQixJQUFNLElBQUksR0FBUSxRQUFRLENBQUMsSUFBSSxDQUFDO0lBQ2hDLElBQU0sR0FBRyxHQUFRLFFBQVEsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ3JDLElBQUEsS0FBSyxHQUFjLE1BQU0sR0FBcEIsRUFBRSxRQUFRLEdBQUksTUFBTSxHQUFWLENBQVc7SUFFakMsT0FBTyxJQUFJLENBQUMsMEJBQTBCLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0FBaUIxRCxDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsT0FBTyxHQUFHLFFBQVEsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBGaXJlYmFzZVxyXG4gKlxyXG4gKiBAYXV0aG9yIHdhZGFoa29kZSA8bXZwLmRlZGVmaWxhcmFzQGdtYWlsLmNvbT5cclxuICogQHNpbmNlIHZlcnNpb24gMS4yLjBcclxuICovXHJcbmxldCBGaXJlYmFzZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XHJcbkZpcmViYXNlLmRhdGUgPSBuZXcgRGF0ZSgpO1xyXG5GaXJlYmFzZS5zZWNvbmRzID0gRmlyZWJhc2UuZGF0ZS5nZXRNaWxsaXNlY29uZHMoKTtcclxuXHJcbkZpcmViYXNlID0gKGFwcDogT2JqZWN0IHwgYW55KSA9PiB7XHJcbiAgRmlyZWJhc2UuYXV0aCA9IGFwcC5hdXRoKCk7XHJcbiAgRmlyZWJhc2UuZGIgPSBhcHAuZGF0YWJhc2UoKTtcclxuXHJcbiAgcmV0dXJuIEZpcmViYXNlO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIE1lbmdhbWJpbCBzZW11YSBkYXRhIGRhcmkgcmVhbHRpbWUgZGF0YWJhc2VcclxuICpcclxuICogQHBhcmFtIHRhYmxlTmFtZSBzdHJpbmdcclxuICovXHJcbkZpcmViYXNlLmZpbmRBbGwgPSAodGFibGVOYW1lOiBzdHJpbmcpID0+IHtcclxuICBjb25zdCByZWY6IGFueSA9IEZpcmViYXNlLmRiLnJlZih0YWJsZU5hbWUpO1xyXG5cclxuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgIHJlZi5vbihcclxuICAgICAgICAndmFsdWUnLFxyXG4gICAgICAgIChzbmFwc2hvdDogYW55KSA9PiByZXNvbHZlKHNuYXBzaG90KSxcclxuICAgICAgICAoZXJyb3I6IGFueSkgPT4gcmVqZWN0KHRydWUpXHJcbiAgICAgICk7XHJcbiAgICB9LCBGaXJlYmFzZS5zZWNvbmRzKTtcclxuICB9KTtcclxufTtcclxuXHJcbi8qKlxyXG4gKlxyXG4gKiBAcGFyYW0gdGFibGVOYW1lIHN0cmluZ1xyXG4gKiBAcGFyYW0gcGFyYW1zIGFycmF5XHJcbiAqL1xyXG5GaXJlYmFzZS5zaWduSW5XaXRoRW1haWxBbmRQYXNzd29yZCA9IChcclxuICB0YWJsZU5hbWU6IHN0cmluZyxcclxuICBwYXJhbXM6IEFycmF5PHN0cmluZz5cclxuKSA9PiB7XHJcbiAgY29uc3QgYXV0aDogYW55ID0gRmlyZWJhc2UuYXV0aDtcclxuICBjb25zdCByZWY6IGFueSA9IEZpcmViYXNlLmRiLnJlZih0YWJsZU5hbWUpO1xyXG4gIGNvbnN0IFtlbWFpbCwgcGFzc3dvcmRdID0gcGFyYW1zO1xyXG5cclxuICByZXR1cm4gYXV0aC5zaWduSW5XaXRoRW1haWxBbmRQYXNzd29yZChlbWFpbCwgcGFzc3dvcmQpO1xyXG4gIC8vIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgLy8gICBzZXRUaW1lb3V0KFxyXG4gIC8vICAgICAoKSA9PlxyXG4gIC8vICAgICAgIEZpcmViYXNlLmRiLnF1ZXJ5KFxyXG4gIC8vICAgICAgICAgcXVlcnksXHJcbiAgLy8gICAgICAgICBwYXJhbXMsXHJcbiAgLy8gICAgICAgICAoZXJyOiBvYmplY3QgfCBudWxsIHwgYW55LCBzbmFwc2hvdDogb2JqZWN0IHwgYW55KSA9PlxyXG4gIC8vICAgICAgICAgICBlcnIgIT0gbnVsbFxyXG4gIC8vICAgICAgICAgICAgID8gcmVqZWN0KHRydWUpXHJcbiAgLy8gICAgICAgICAgICAgOiBzbmFwc2hvdC5yb3dzLmxlbmd0aCA+PSAxXHJcbiAgLy8gICAgICAgICAgICAgPyByZXNvbHZlKHNuYXBzaG90LnJvd3MpXHJcbiAgLy8gICAgICAgICAgICAgOiByZWplY3QodHJ1ZSlcclxuICAvLyAgICAgICApLFxyXG4gIC8vICAgICBzZWNvbmRzXHJcbiAgLy8gICApO1xyXG4gIC8vIH0pO1xyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBGaXJlYmFzZTtcclxuIl19