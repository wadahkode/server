"use strict";
var Model = Object.create(null);
Model = function (client) {
    Model.db = client;
    Model.db.connect();
    return Model;
};
Model.findAll = function (query, sort, prepend) {
    if (prepend === void 0) { prepend = false; }
    var date = new Date(), seconds = date.getMilliseconds();
    if (prepend && sort.length > 1) {
        var orderBy = void 0, limit = 1, keyword = void 0;
        if (sort.length > 2) {
            orderBy = sort.shift();
            limit = sort.pop();
            keyword = sort.pop();
            query = query + (" ORDER BY " + orderBy + " " + keyword + " LIMIT " + limit);
        }
        else {
            orderBy = sort.shift();
            keyword = sort.pop();
            query = query + (" ORDER BY " + orderBy + " " + keyword);
        }
        return new Promise(function (resolve, reject) {
            setTimeout(function () {
                Model.db.query(query, function (err, snapshot) {
                    return !err ? resolve(snapshot.rows) : reject(err);
                });
            }, seconds);
        });
    }
    return new Promise(function (resolve, reject) {
        setTimeout(function () {
            Model.db.query(query, function (err, snapshot) {
                return !err ? resolve(snapshot.rows) : reject(err);
            });
        }, seconds);
    });
};
Model.findById = function (query, params) {
    return new Promise(function (resolve, reject) {
        return Model.db.query(query, params, function (err, snapshot) {
            return !err ? resolve(snapshot.rows) : reject(err);
        });
    });
};
Model.push = function (query, values) {
    return new Promise(function (resolve) {
        return Model.db.query(query, values, function (err) { return resolve(err); });
    });
};
Model.update = function (query) {
    return new Promise(function (resolve) {
        return Model.db.query(query, function (err) { return resolve(err); });
    });
};
Model.delete = function (query) {
    return new Promise(function (resolve) {
        return Model.db.query(query, function (err) { return resolve(err); });
    });
};
module.exports = Model;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kZWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvbW9kZWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQU1BLElBQUksS0FBSyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7QUFPaEMsS0FBSyxHQUFHLFVBQUMsTUFBb0I7SUFDM0IsS0FBSyxDQUFDLEVBQUUsR0FBRyxNQUFNLENBQUM7SUFDbEIsS0FBSyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUVuQixPQUFPLEtBQUssQ0FBQztBQUNmLENBQUMsQ0FBQztBQVNGLEtBQUssQ0FBQyxPQUFPLEdBQUcsVUFDZCxLQUFhLEVBQ2IsSUFBa0MsRUFDbEMsT0FBd0I7SUFBeEIsd0JBQUEsRUFBQSxlQUF3QjtJQUV4QixJQUFNLElBQUksR0FBRyxJQUFJLElBQUksRUFBRSxFQUNyQixPQUFPLEdBQVcsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDO0lBRTNDLElBQUksT0FBTyxJQUFJLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1FBQzlCLElBQUksT0FBTyxTQUFvQixFQUM3QixLQUFLLEdBQXVCLENBQUMsRUFDN0IsT0FBTyxTQUFvQixDQUFDO1FBRTlCLElBQUksSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDbkIsT0FBTyxHQUFHLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztZQUN2QixLQUFLLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQ25CLE9BQU8sR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7WUFFckIsS0FBSyxHQUFHLEtBQUssSUFBRyxlQUFhLE9BQU8sU0FBSSxPQUFPLGVBQVUsS0FBTyxDQUFBLENBQUM7U0FDbEU7YUFBTTtZQUNMLE9BQU8sR0FBRyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7WUFDdkIsT0FBTyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztZQUVyQixLQUFLLEdBQUcsS0FBSyxJQUFHLGVBQWEsT0FBTyxTQUFJLE9BQVMsQ0FBQSxDQUFDO1NBQ25EO1FBQ0QsT0FBTyxJQUFJLE9BQU8sQ0FBQyxVQUFDLE9BQU8sRUFBRSxNQUFNO1lBQ2pDLFVBQVUsQ0FBQztnQkFDVCxLQUFLLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FDWixLQUFLLEVBQ0wsVUFBQyxHQUF3QixFQUFFLFFBQXNCO29CQUMvQyxPQUFBLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDO2dCQUEzQyxDQUEyQyxDQUM5QyxDQUFDO1lBQ0osQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ2QsQ0FBQyxDQUFDLENBQUM7S0FDSjtJQUNELE9BQU8sSUFBSSxPQUFPLENBQUMsVUFBQyxPQUFPLEVBQUUsTUFBTTtRQUNqQyxVQUFVLENBQUM7WUFDVCxLQUFLLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FDWixLQUFLLEVBQ0wsVUFBQyxHQUF3QixFQUFFLFFBQXNCO2dCQUMvQyxPQUFBLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDO1lBQTNDLENBQTJDLENBQzlDLENBQUM7UUFDSixDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDZCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQztBQVFGLEtBQUssQ0FBQyxRQUFRLEdBQUcsVUFBQyxLQUFhLEVBQUUsTUFBcUI7SUFDcEQsT0FBQSxJQUFJLE9BQU8sQ0FBQyxVQUFDLE9BQU8sRUFBRSxNQUFNO1FBQzFCLE9BQUEsS0FBSyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQ1osS0FBSyxFQUNMLE1BQU0sRUFDTixVQUFDLEdBQXdCLEVBQUUsUUFBc0I7WUFDL0MsT0FBQSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQztRQUEzQyxDQUEyQyxDQUM5QztJQUxELENBS0MsQ0FDRjtBQVBELENBT0MsQ0FBQztBQVFKLEtBQUssQ0FBQyxJQUFJLEdBQUcsVUFBQyxLQUFhLEVBQUUsTUFBcUI7SUFDaEQsT0FBQSxJQUFJLE9BQU8sQ0FBQyxVQUFDLE9BQU87UUFDbEIsT0FBQSxLQUFLLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsTUFBTSxFQUFFLFVBQUMsR0FBd0IsSUFBSyxPQUFBLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBWixDQUFZLENBQUM7SUFBekUsQ0FBeUUsQ0FDMUU7QUFGRCxDQUVDLENBQUM7QUFPSixLQUFLLENBQUMsTUFBTSxHQUFHLFVBQUMsS0FBYTtJQUMzQixPQUFBLElBQUksT0FBTyxDQUFDLFVBQUMsT0FBTztRQUNsQixPQUFBLEtBQUssQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxVQUFDLEdBQXdCLElBQUssT0FBQSxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQVosQ0FBWSxDQUFDO0lBQWpFLENBQWlFLENBQ2xFO0FBRkQsQ0FFQyxDQUFDO0FBT0osS0FBSyxDQUFDLE1BQU0sR0FBRyxVQUFDLEtBQWE7SUFDM0IsT0FBQSxJQUFJLE9BQU8sQ0FBQyxVQUFDLE9BQU87UUFDbEIsT0FBQSxLQUFLLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsVUFBQyxHQUF3QixJQUFLLE9BQUEsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFaLENBQVksQ0FBQztJQUFqRSxDQUFpRSxDQUNsRTtBQUZELENBRUMsQ0FBQztBQUdKLE1BQU0sQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIE1vZGVsXHJcbiAqXHJcbiAqIEBhdXRob3Igd2FkYWhrb2RlIDxtdnAuZGVkZWZpbGFyYXNAZ21haWwuY29tPlxyXG4gKiBAc2luY2UgdmVyc2lvbiAxLjEuOFxyXG4gKi9cclxubGV0IE1vZGVsID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcclxuXHJcbi8qKlxyXG4gKiBDb25zdHJ1Y3RvciBvciBGdW5jdGlvblxyXG4gKlxyXG4gKiBAcmV0dXJuIE1vZGVsXHJcbiAqL1xyXG5Nb2RlbCA9IChjbGllbnQ6IG9iamVjdCB8IGFueSkgPT4ge1xyXG4gIE1vZGVsLmRiID0gY2xpZW50O1xyXG4gIE1vZGVsLmRiLmNvbm5lY3QoKTtcclxuXHJcbiAgcmV0dXJuIE1vZGVsO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIE1lbmdhbWJpbCBzZW11YSBkYXRhIGRhcmkgZGF0YWJhc2VcclxuICpcclxuICogQHBhcmFtIHF1ZXJ5IHN0cmluZ1xyXG4gKiBAcGFyYW0gc29ydCBhcnJheXxudW1iZXJ8YW55XHJcbiAqIEBwYXJhbSBwcmVwZW5kIGJvb2xlYW5cclxuICovXHJcbk1vZGVsLmZpbmRBbGwgPSAoXHJcbiAgcXVlcnk6IHN0cmluZyxcclxuICBzb3J0OiBBcnJheTxzdHJpbmcgfCBudW1iZXIgfCBhbnk+LFxyXG4gIHByZXBlbmQ6IGJvb2xlYW4gPSBmYWxzZVxyXG4pID0+IHtcclxuICBjb25zdCBkYXRlID0gbmV3IERhdGUoKSxcclxuICAgIHNlY29uZHM6IG51bWJlciA9IGRhdGUuZ2V0TWlsbGlzZWNvbmRzKCk7XHJcblxyXG4gIGlmIChwcmVwZW5kICYmIHNvcnQubGVuZ3RoID4gMSkge1xyXG4gICAgbGV0IG9yZGVyQnk6IHN0cmluZyB8IHVuZGVmaW5lZCxcclxuICAgICAgbGltaXQ6IG51bWJlciB8IHVuZGVmaW5lZCA9IDEsXHJcbiAgICAgIGtleXdvcmQ6IHN0cmluZyB8IHVuZGVmaW5lZDtcclxuXHJcbiAgICBpZiAoc29ydC5sZW5ndGggPiAyKSB7XHJcbiAgICAgIG9yZGVyQnkgPSBzb3J0LnNoaWZ0KCk7XHJcbiAgICAgIGxpbWl0ID0gc29ydC5wb3AoKTtcclxuICAgICAga2V5d29yZCA9IHNvcnQucG9wKCk7XHJcblxyXG4gICAgICBxdWVyeSA9IHF1ZXJ5ICsgYCBPUkRFUiBCWSAke29yZGVyQnl9ICR7a2V5d29yZH0gTElNSVQgJHtsaW1pdH1gO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgb3JkZXJCeSA9IHNvcnQuc2hpZnQoKTtcclxuICAgICAga2V5d29yZCA9IHNvcnQucG9wKCk7XHJcblxyXG4gICAgICBxdWVyeSA9IHF1ZXJ5ICsgYCBPUkRFUiBCWSAke29yZGVyQnl9ICR7a2V5d29yZH1gO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgTW9kZWwuZGIucXVlcnkoXHJcbiAgICAgICAgICBxdWVyeSxcclxuICAgICAgICAgIChlcnI6IG9iamVjdCB8IG51bGwgfCBhbnksIHNuYXBzaG90OiBvYmplY3QgfCBhbnkpID0+XHJcbiAgICAgICAgICAgICFlcnIgPyByZXNvbHZlKHNuYXBzaG90LnJvd3MpIDogcmVqZWN0KGVycilcclxuICAgICAgICApO1xyXG4gICAgICB9LCBzZWNvbmRzKTtcclxuICAgIH0pO1xyXG4gIH1cclxuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgIE1vZGVsLmRiLnF1ZXJ5KFxyXG4gICAgICAgIHF1ZXJ5LFxyXG4gICAgICAgIChlcnI6IG9iamVjdCB8IG51bGwgfCBhbnksIHNuYXBzaG90OiBvYmplY3QgfCBhbnkpID0+XHJcbiAgICAgICAgICAhZXJyID8gcmVzb2x2ZShzbmFwc2hvdC5yb3dzKSA6IHJlamVjdChlcnIpXHJcbiAgICAgICk7XHJcbiAgICB9LCBzZWNvbmRzKTtcclxuICB9KTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBNZW5nYW1iaWwgZGF0YSBkYXJpIGRhdGFiYXNlIGJlcmRhc2Fya2FuIHVzZXJuYW1lIGF0YXUgZW1haWxcclxuICpcclxuICogQHBhcmFtIHF1ZXJ5IHN0cmluZ1xyXG4gKiBAcGFyYW0gcGFyYW1zIGFycmF5XHJcbiAqL1xyXG5Nb2RlbC5maW5kQnlJZCA9IChxdWVyeTogc3RyaW5nLCBwYXJhbXM6IEFycmF5PHN0cmluZz4pID0+XHJcbiAgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT5cclxuICAgIE1vZGVsLmRiLnF1ZXJ5KFxyXG4gICAgICBxdWVyeSxcclxuICAgICAgcGFyYW1zLFxyXG4gICAgICAoZXJyOiBvYmplY3QgfCBudWxsIHwgYW55LCBzbmFwc2hvdDogb2JqZWN0IHwgYW55KSA9PlxyXG4gICAgICAgICFlcnIgPyByZXNvbHZlKHNuYXBzaG90LnJvd3MpIDogcmVqZWN0KGVycilcclxuICAgIClcclxuICApO1xyXG5cclxuLyoqXHJcbiAqIE1lbnlpbXBhbiBkYXRhIGtlZGFsYW0gZGF0YWJhc2VcclxuICpcclxuICogQHBhcmFtIHF1ZXJ5IHN0cmluZ1xyXG4gKiBAcGFyYW0gdmFsdWVzIGFycmF5XHJcbiAqL1xyXG5Nb2RlbC5wdXNoID0gKHF1ZXJ5OiBzdHJpbmcsIHZhbHVlczogQXJyYXk8c3RyaW5nPikgPT5cclxuICBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT5cclxuICAgIE1vZGVsLmRiLnF1ZXJ5KHF1ZXJ5LCB2YWx1ZXMsIChlcnI6IG9iamVjdCB8IG51bGwgfCBhbnkpID0+IHJlc29sdmUoZXJyKSlcclxuICApO1xyXG5cclxuLyoqXHJcbiAqIE1lbXBlcmJhcnVpIGRhdGEgeWFuZyB0ZXJzaW1wYW4gZGlkYXRhYmFzZVxyXG4gKlxyXG4gKiBAcGFyYW0gcXVlcnkgc3RyaW5nXHJcbiAqL1xyXG5Nb2RlbC51cGRhdGUgPSAocXVlcnk6IHN0cmluZykgPT5cclxuICBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT5cclxuICAgIE1vZGVsLmRiLnF1ZXJ5KHF1ZXJ5LCAoZXJyOiBvYmplY3QgfCBudWxsIHwgYW55KSA9PiByZXNvbHZlKGVycikpXHJcbiAgKTtcclxuXHJcbi8qKlxyXG4gKiBNZW5naGFwdXMgZGF0YSBkYXJpIGRhdGFiYXNlXHJcbiAqXHJcbiAqIEBwYXJhbSBxdWVyeSBzdHJpbmdcclxuICovXHJcbk1vZGVsLmRlbGV0ZSA9IChxdWVyeTogc3RyaW5nKSA9PlxyXG4gIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PlxyXG4gICAgTW9kZWwuZGIucXVlcnkocXVlcnksIChlcnI6IG9iamVjdCB8IG51bGwgfCBhbnkpID0+IHJlc29sdmUoZXJyKSlcclxuICApO1xyXG5cclxuLy8gRXhwb3J0IE1vZGVsXHJcbm1vZHVsZS5leHBvcnRzID0gTW9kZWw7XHJcbiJdfQ==