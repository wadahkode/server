"use strict";
var Model = Object.create(null);
var date = new Date(), seconds = date.getMilliseconds();
Model = function (client) {
    Model.db = client;
    Model.db.connect();
    return Model;
};
Model.findAll = function (query, sort, prepend) {
    if (prepend === void 0) { prepend = false; }
    if (prepend && sort.length > 1) {
        var orderBy = void 0, limit = 1, keyword = void 0;
        if (sort.length > 2) {
            orderBy = sort.shift();
            limit = sort.pop();
            keyword = sort.pop();
            query = query + (" ORDER BY " + orderBy + " " + keyword + " LIMIT " + limit);
        }
        else {
            orderBy = sort.shift();
            keyword = sort.pop();
            query = query + (" ORDER BY " + orderBy + " " + keyword);
        }
        return new Promise(function (resolve, reject) {
            setTimeout(function () {
                Model.db.query(query, function (err, snapshot) {
                    return err != null
                        ? reject(true)
                        : snapshot.rows.length >= 1
                            ? resolve(snapshot.rows)
                            : reject(true);
                });
            }, seconds);
        });
    }
    return new Promise(function (resolve, reject) {
        setTimeout(function () {
            Model.db.query(query, function (err, snapshot) {
                return !err ? resolve(snapshot.rows) : reject(err);
            });
        }, seconds);
    });
};
Model.findById = function (query, params) {
    return new Promise(function (resolve, reject) {
        setTimeout(function () {
            return Model.db.query(query, params, function (err, snapshot) {
                return err != null
                    ? reject(true)
                    : snapshot.rows.length >= 1
                        ? resolve(snapshot.rows)
                        : reject(true);
            });
        }, seconds);
    });
};
Model.push = function (query, values) {
    return new Promise(function (resolve) {
        return Model.db.query(query, values, function (err) { return resolve(err); });
    });
};
Model.update = function (query) {
    return new Promise(function (resolve) {
        return Model.db.query(query, function (err) { return resolve(err); });
    });
};
Model.delete = function (query) {
    return new Promise(function (resolve) {
        return Model.db.query(query, function (err) { return resolve(err); });
    });
};
module.exports = Model;
//# sourceMappingURL=data:application/json;base64,