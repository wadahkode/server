"use strict";
var Session = function () {
    var get, has, set, destroy, start, unset;
    destroy = function () {
        var name = document.cookie;
        if (name != null || name != "") {
            document.cookie = name + '; expires=Thu, 01 Jan 1980 00:00:00 UTC; path=/;';
        }
    },
        start = function () {
            return (typeof document == 'undefined')
                ? require('jsdom-global')()
                : false;
        };
    get = function (key) {
        var sessid = key + '=', sess = document.cookie.split(';');
        for (var i = 0; i < sess.length; i++) {
            var s = sess[i];
            while (s.charAt(0) == ' ') {
                s = s.substring(1);
            }
            if (s.indexOf(sessid) == 0) {
                return s.substring(sessid.length, s.length);
            }
        }
        return "";
    };
    has = function (key) {
        return get(key) != "" ? true : false;
    };
    set = function (name, value, expired) {
        if (expired === void 0) { expired = 1; }
        var date = new Date();
        date.setTime(date.getTime() + (expired * 24 * 60 * 60 * 1000));
        var expires = "expires=" + date.toUTCString();
        document.cookie = name + "=" + value + ";" + expires + ";path=/";
    };
    unset = function (name) {
        var user = get(name);
        if (user != null || user != "") {
            document.cookie = name + '=' + user + '; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;';
        }
    };
    return {
        destroy: destroy,
        get: get,
        has: has,
        start: start,
        set: set,
        unset: unset
    };
};
module.exports = Session;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2Vzc2lvbi9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBTUEsSUFBTSxPQUFPLEdBQUc7SUFDZCxJQUFJLEdBQVEsRUFDVixHQUFRLEVBQ1IsR0FBUSxFQUNSLE9BQVksRUFDWixLQUFVLEVBQ1YsS0FBVSxDQUFDO0lBRWIsT0FBTyxHQUFHO1FBQ1IsSUFBSSxJQUFJLEdBQVUsUUFBUSxDQUFDLE1BQU0sQ0FBQztRQUVsQyxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLEVBQUUsRUFBRTtZQUM5QixRQUFRLENBQUMsTUFBTSxHQUFHLElBQUksR0FBRyxrREFBa0QsQ0FBQztTQUM3RTtJQUNILENBQUM7UUFFRCxLQUFLLEdBQUc7WUFDTixPQUFPLENBQUMsT0FBTyxRQUFRLElBQUksV0FBVyxDQUFDO2dCQUNyQyxDQUFDLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxFQUFFO2dCQUMzQixDQUFDLENBQUMsS0FBSyxDQUFDO1FBQ1osQ0FBQyxDQUFDO0lBRUYsR0FBRyxHQUFHLFVBQVMsR0FBVztRQUN4QixJQUFJLE1BQU0sR0FBVyxHQUFHLEdBQUcsR0FBRyxFQUM1QixJQUFJLEdBQWEsUUFBUSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFOUMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDcEMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBRWhCLE9BQU8sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxHQUFHLEVBQUU7Z0JBQ3pCLENBQUMsR0FBRyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQ3BCO1lBQ0QsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRTtnQkFDMUIsT0FBTyxDQUFDLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDO2FBQzdDO1NBQ0Y7UUFDRCxPQUFPLEVBQUUsQ0FBQztJQUNaLENBQUMsQ0FBQztJQUVGLEdBQUcsR0FBRyxVQUFTLEdBQVc7UUFDeEIsT0FBTyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztJQUN2QyxDQUFDLENBQUM7SUFFRixHQUFHLEdBQUcsVUFBUyxJQUFZLEVBQUUsS0FBYSxFQUFFLE9BQW1CO1FBQW5CLHdCQUFBLEVBQUEsV0FBbUI7UUFDN0QsSUFBSSxJQUFJLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQztRQUV0QixJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLE9BQU8sR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQy9ELElBQUksT0FBTyxHQUFHLFVBQVUsR0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7UUFFNUMsUUFBUSxDQUFDLE1BQU0sR0FBRyxJQUFJLEdBQUcsR0FBRyxHQUFHLEtBQUssR0FBRyxHQUFHLEdBQUcsT0FBTyxHQUFHLFNBQVMsQ0FBQztJQUNuRSxDQUFDLENBQUM7SUFFRixLQUFLLEdBQUcsVUFBUyxJQUFZO1FBQzNCLElBQUksSUFBSSxHQUFXLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUU3QixJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLEVBQUUsRUFBRTtZQUM5QixRQUFRLENBQUMsTUFBTSxHQUFHLElBQUksR0FBRyxHQUFHLEdBQUcsSUFBSSxHQUFHLGtEQUFrRCxDQUFDO1NBQzFGO0lBQ0gsQ0FBQyxDQUFDO0lBRUYsT0FBTztRQUNMLE9BQU8sU0FBQTtRQUNQLEdBQUcsS0FBQTtRQUNILEdBQUcsS0FBQTtRQUNILEtBQUssT0FBQTtRQUNMLEdBQUcsS0FBQTtRQUNILEtBQUssT0FBQTtLQUNOLENBQUM7QUFDSixDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBTZXNzaW9uIEhhbmRsZXJcclxuICogXHJcbiAqIEBhdXRob3Igd2FkYWhrb2RlIDxtdnAuZGVkZWZpbGFyYXNAZ21haWwuY29tPlxyXG4gKiBAc2luY2UgdmVyc2lvbiAxLjEuM1xyXG4gKi9cclxuY29uc3QgU2Vzc2lvbiA9IGZ1bmN0aW9uKCkge1xyXG4gIGxldCBnZXQ6IGFueSxcclxuICAgIGhhczogYW55LFxyXG4gICAgc2V0OiBhbnksXHJcbiAgICBkZXN0cm95OiBhbnksXHJcbiAgICBzdGFydDogYW55LFxyXG4gICAgdW5zZXQ6IGFueTtcclxuICBcclxuICBkZXN0cm95ID0gZnVuY3Rpb24oKSB7XHJcbiAgICBsZXQgbmFtZTpzdHJpbmcgPSBkb2N1bWVudC5jb29raWU7XHJcblxyXG4gICAgaWYgKG5hbWUgIT0gbnVsbCB8fCBuYW1lICE9IFwiXCIpIHtcclxuICAgICAgZG9jdW1lbnQuY29va2llID0gbmFtZSArICc7IGV4cGlyZXM9VGh1LCAwMSBKYW4gMTk4MCAwMDowMDowMCBVVEM7IHBhdGg9LzsnO1xyXG4gICAgfVxyXG4gIH0sXHJcbiAgXHJcbiAgc3RhcnQgPSBmdW5jdGlvbigpIHtcclxuICAgIHJldHVybiAodHlwZW9mIGRvY3VtZW50ID09ICd1bmRlZmluZWQnKVxyXG4gICAgICA/IHJlcXVpcmUoJ2pzZG9tLWdsb2JhbCcpKClcclxuICAgICAgOiBmYWxzZTtcclxuICB9O1xyXG4gIFxyXG4gIGdldCA9IGZ1bmN0aW9uKGtleTogc3RyaW5nKSB7XHJcbiAgICBsZXQgc2Vzc2lkOiBzdHJpbmcgPSBrZXkgKyAnPScsXHJcbiAgICAgIHNlc3M6IHN0cmluZ1tdID0gZG9jdW1lbnQuY29va2llLnNwbGl0KCc7Jyk7XHJcbiAgICBcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2Vzcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICBsZXQgcyA9IHNlc3NbaV07XHJcbiAgICAgIFxyXG4gICAgICB3aGlsZSAocy5jaGFyQXQoMCkgPT0gJyAnKSB7XHJcbiAgICAgICAgcyA9IHMuc3Vic3RyaW5nKDEpO1xyXG4gICAgICB9XHJcbiAgICAgIGlmIChzLmluZGV4T2Yoc2Vzc2lkKSA9PSAwKSB7XHJcbiAgICAgICAgcmV0dXJuIHMuc3Vic3RyaW5nKHNlc3NpZC5sZW5ndGgsIHMubGVuZ3RoKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIFwiXCI7XHJcbiAgfTtcclxuICBcclxuICBoYXMgPSBmdW5jdGlvbihrZXk6IHN0cmluZykge1xyXG4gICAgcmV0dXJuIGdldChrZXkpICE9IFwiXCIgPyB0cnVlIDogZmFsc2U7XHJcbiAgfTtcclxuICBcclxuICBzZXQgPSBmdW5jdGlvbihuYW1lOiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcsIGV4cGlyZWQ6IG51bWJlciA9IDEpIHtcclxuICAgIGxldCBkYXRlID0gbmV3IERhdGUoKTtcclxuICAgIFxyXG4gICAgZGF0ZS5zZXRUaW1lKGRhdGUuZ2V0VGltZSgpICsgKGV4cGlyZWQgKiAyNCAqIDYwICogNjAgKiAxMDAwKSk7XHJcbiAgICBsZXQgZXhwaXJlcyA9IFwiZXhwaXJlcz1cIitkYXRlLnRvVVRDU3RyaW5nKCk7XHJcbiAgICBcclxuICAgIGRvY3VtZW50LmNvb2tpZSA9IG5hbWUgKyBcIj1cIiArIHZhbHVlICsgXCI7XCIgKyBleHBpcmVzICsgXCI7cGF0aD0vXCI7XHJcbiAgfTtcclxuXHJcbiAgdW5zZXQgPSBmdW5jdGlvbihuYW1lOiBzdHJpbmcpIHtcclxuICAgIGxldCB1c2VyOiBzdHJpbmcgPSBnZXQobmFtZSk7XHJcblxyXG4gICAgaWYgKHVzZXIgIT0gbnVsbCB8fCB1c2VyICE9IFwiXCIpIHtcclxuICAgICAgZG9jdW1lbnQuY29va2llID0gbmFtZSArICc9JyArIHVzZXIgKyAnOyBleHBpcmVzPVRodSwgMDEgSmFuIDE5NzAgMDA6MDA6MDAgVVRDOyBwYXRoPS87JztcclxuICAgIH1cclxuICB9O1xyXG4gIFxyXG4gIHJldHVybiB7XHJcbiAgICBkZXN0cm95LFxyXG4gICAgZ2V0LFxyXG4gICAgaGFzLFxyXG4gICAgc3RhcnQsXHJcbiAgICBzZXQsXHJcbiAgICB1bnNldFxyXG4gIH07XHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IFNlc3Npb247Il19