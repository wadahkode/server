"use strict";
var Session = function () {
    var get, has, set, destroy, flash, start, unset;
    var date = new Date();
    date.toLocaleString('en-US', {
        hour12: false
    });
    destroy = function () {
        var name = document.cookie;
        if (name != null || name != "") {
            document.cookie = name + '; expires=Thu, 01 Jan 1980 00:00:00 UTC; path=/;';
        }
    };
    flash = function (name, value) {
        date.setTime(date.getTime() + (1 * 1 * 200 * 100));
        var expires = "expires=" + date.toUTCString();
        document.cookie = name + "=" + value + ";" + expires + ";path=/";
        var refresh = setInterval(function () {
            unset(name);
            clearInterval(refresh);
        }, 200);
    };
    start = function () {
        return (typeof document == 'undefined')
            ? require('jsdom-global')()
            : false;
    };
    get = function (key) {
        var sessid = key + '=', sess = document.cookie.split(';');
        for (var i = 0; i < sess.length; i++) {
            var s = sess[i];
            while (s.charAt(0) == ' ') {
                s = s.substring(1);
            }
            if (s.indexOf(sessid) == 0) {
                return s.substring(sessid.length, s.length);
            }
        }
        return "";
    };
    has = function (key) {
        return get(key) != "" ? true : false;
    };
    set = function (name, value, expired) {
        if (expired === void 0) { expired = 1; }
        date.setTime(date.getTime() + (expired * 24 * 60 * 60 * 1000));
        var expires = "expires=" + date.toUTCString();
        document.cookie = name + "=" + value + ";" + expires + ";path=/";
    };
    unset = function (name) {
        var user = get(name);
        if (user != null || user != "") {
            document.cookie = name + '=' + user + '; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;';
        }
    };
    return {
        destroy: destroy,
        flash: flash,
        get: get,
        has: has,
        start: start,
        set: set,
        unset: unset
    };
};
module.exports = Session;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2Vzc2lvbi9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBYUEsSUFBTSxPQUFPLEdBQUc7SUFDZCxJQUFJLEdBQVEsRUFDVixHQUFRLEVBQ1IsR0FBUSxFQUNSLE9BQVksRUFDWixLQUFZLEVBQ1osS0FBVSxFQUNWLEtBQVUsQ0FBQztJQUViLElBQU0sSUFBSSxHQUFTLElBQUksSUFBSSxFQUFFLENBQUM7SUFDOUIsSUFBSSxDQUFDLGNBQWMsQ0FBQyxPQUFPLEVBQUU7UUFDM0IsTUFBTSxFQUFFLEtBQUs7S0FDZCxDQUFDLENBQUM7SUFFSCxPQUFPLEdBQUc7UUFDUixJQUFJLElBQUksR0FBVSxRQUFRLENBQUMsTUFBTSxDQUFDO1FBRWxDLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksRUFBRSxFQUFFO1lBQzlCLFFBQVEsQ0FBQyxNQUFNLEdBQUcsSUFBSSxHQUFHLGtEQUFrRCxDQUFDO1NBQzdFO0lBQ0gsQ0FBQyxDQUFDO0lBRUYsS0FBSyxHQUFHLFVBQUMsSUFBWSxFQUFFLEtBQWE7UUFDbEMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ25ELElBQUksT0FBTyxHQUFXLFVBQVUsR0FBRyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7UUFHdEQsUUFBUSxDQUFDLE1BQU0sR0FBRyxJQUFJLEdBQUcsR0FBRyxHQUFHLEtBQUssR0FBRyxHQUFHLEdBQUcsT0FBTyxHQUFHLFNBQVMsQ0FBQztRQUVqRSxJQUFJLE9BQU8sR0FBbUIsV0FBVyxDQUFDO1lBQ3hDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNaLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUN6QixDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDVixDQUFDLENBQUM7SUFFRixLQUFLLEdBQUc7UUFDTixPQUFPLENBQUMsT0FBTyxRQUFRLElBQUksV0FBVyxDQUFDO1lBQ3JDLENBQUMsQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLEVBQUU7WUFDM0IsQ0FBQyxDQUFDLEtBQUssQ0FBQztJQUNaLENBQUMsQ0FBQztJQUVGLEdBQUcsR0FBRyxVQUFTLEdBQVc7UUFDeEIsSUFBSSxNQUFNLEdBQVcsR0FBRyxHQUFHLEdBQUcsRUFDNUIsSUFBSSxHQUFhLFFBQVEsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRTlDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ3BDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUVoQixPQUFPLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksR0FBRyxFQUFFO2dCQUN6QixDQUFDLEdBQUcsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUNwQjtZQUNELElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUU7Z0JBQzFCLE9BQU8sQ0FBQyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQzthQUM3QztTQUNGO1FBQ0QsT0FBTyxFQUFFLENBQUM7SUFDWixDQUFDLENBQUM7SUFFRixHQUFHLEdBQUcsVUFBUyxHQUFXO1FBQ3hCLE9BQU8sR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7SUFDdkMsQ0FBQyxDQUFDO0lBRUYsR0FBRyxHQUFHLFVBQVMsSUFBWSxFQUFFLEtBQWEsRUFBRSxPQUFtQjtRQUFuQix3QkFBQSxFQUFBLFdBQW1CO1FBQzdELElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsT0FBTyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDL0QsSUFBSSxPQUFPLEdBQUcsVUFBVSxHQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUU1QyxRQUFRLENBQUMsTUFBTSxHQUFHLElBQUksR0FBRyxHQUFHLEdBQUcsS0FBSyxHQUFHLEdBQUcsR0FBRyxPQUFPLEdBQUcsU0FBUyxDQUFDO0lBQ25FLENBQUMsQ0FBQztJQUVGLEtBQUssR0FBRyxVQUFTLElBQVk7UUFDM0IsSUFBSSxJQUFJLEdBQVcsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRTdCLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksRUFBRSxFQUFFO1lBQzlCLFFBQVEsQ0FBQyxNQUFNLEdBQUcsSUFBSSxHQUFHLEdBQUcsR0FBRyxJQUFJLEdBQUcsa0RBQWtELENBQUM7U0FDMUY7SUFDSCxDQUFDLENBQUM7SUFFRixPQUFPO1FBQ0wsT0FBTyxTQUFBO1FBQ1AsS0FBSyxPQUFBO1FBQ0wsR0FBRyxLQUFBO1FBQ0gsR0FBRyxLQUFBO1FBQ0gsS0FBSyxPQUFBO1FBQ0wsR0FBRyxLQUFBO1FBQ0gsS0FBSyxPQUFBO0tBQ04sQ0FBQztBQUNKLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIFVzZSBUeXBlXHJcbiAqIFxyXG4gKiBAc2luY2UgdmVyc2lvbiAxLjEuOFxyXG4gKi9cclxudHlwZSBmbGFzaCA9IChuYW1lOiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcpID0+IHZvaWQ7XHJcblxyXG4vKipcclxuICogU2Vzc2lvbiBIYW5kbGVyXHJcbiAqIFxyXG4gKiBAYXV0aG9yIHdhZGFoa29kZSA8bXZwLmRlZGVmaWxhcmFzQGdtYWlsLmNvbT5cclxuICogQHNpbmNlIHZlcnNpb24gMS4xLjNcclxuICovXHJcbmNvbnN0IFNlc3Npb24gPSBmdW5jdGlvbigpIHtcclxuICBsZXQgZ2V0OiBhbnksXHJcbiAgICBoYXM6IGFueSxcclxuICAgIHNldDogYW55LFxyXG4gICAgZGVzdHJveTogYW55LFxyXG4gICAgZmxhc2g6IGZsYXNoLFxyXG4gICAgc3RhcnQ6IGFueSxcclxuICAgIHVuc2V0OiBhbnk7XHJcbiAgXHJcbiAgY29uc3QgZGF0ZTogRGF0ZSA9IG5ldyBEYXRlKCk7XHJcbiAgZGF0ZS50b0xvY2FsZVN0cmluZygnZW4tVVMnLCB7XHJcbiAgICBob3VyMTI6IGZhbHNlXHJcbiAgfSk7XHJcblxyXG4gIGRlc3Ryb3kgPSBmdW5jdGlvbigpIHtcclxuICAgIGxldCBuYW1lOnN0cmluZyA9IGRvY3VtZW50LmNvb2tpZTtcclxuXHJcbiAgICBpZiAobmFtZSAhPSBudWxsIHx8IG5hbWUgIT0gXCJcIikge1xyXG4gICAgICBkb2N1bWVudC5jb29raWUgPSBuYW1lICsgJzsgZXhwaXJlcz1UaHUsIDAxIEphbiAxOTgwIDAwOjAwOjAwIFVUQzsgcGF0aD0vOyc7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgZmxhc2ggPSAobmFtZTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nKSA9PiB7XHJcbiAgICBkYXRlLnNldFRpbWUoZGF0ZS5nZXRUaW1lKCkgKyAoMSAqIDEgKiAyMDAgKiAxMDApKTtcclxuICAgIGxldCBleHBpcmVzOiBzdHJpbmcgPSBcImV4cGlyZXM9XCIgKyBkYXRlLnRvVVRDU3RyaW5nKCk7XHJcblxyXG4gICAgXHJcbiAgICBkb2N1bWVudC5jb29raWUgPSBuYW1lICsgXCI9XCIgKyB2YWx1ZSArIFwiO1wiICsgZXhwaXJlcyArIFwiO3BhdGg9L1wiO1xyXG4gICAgXHJcbiAgICBsZXQgcmVmcmVzaDogTm9kZUpTLlRpbWVvdXQgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XHJcbiAgICAgIHVuc2V0KG5hbWUpO1xyXG4gICAgICBjbGVhckludGVydmFsKHJlZnJlc2gpO1xyXG4gICAgfSwgMjAwKTtcclxuICB9O1xyXG4gIFxyXG4gIHN0YXJ0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICByZXR1cm4gKHR5cGVvZiBkb2N1bWVudCA9PSAndW5kZWZpbmVkJylcclxuICAgICAgPyByZXF1aXJlKCdqc2RvbS1nbG9iYWwnKSgpXHJcbiAgICAgIDogZmFsc2U7XHJcbiAgfTtcclxuICBcclxuICBnZXQgPSBmdW5jdGlvbihrZXk6IHN0cmluZykge1xyXG4gICAgbGV0IHNlc3NpZDogc3RyaW5nID0ga2V5ICsgJz0nLFxyXG4gICAgICBzZXNzOiBzdHJpbmdbXSA9IGRvY3VtZW50LmNvb2tpZS5zcGxpdCgnOycpO1xyXG4gICAgXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNlc3MubGVuZ3RoOyBpKyspIHtcclxuICAgICAgbGV0IHMgPSBzZXNzW2ldO1xyXG4gICAgICBcclxuICAgICAgd2hpbGUgKHMuY2hhckF0KDApID09ICcgJykge1xyXG4gICAgICAgIHMgPSBzLnN1YnN0cmluZygxKTtcclxuICAgICAgfVxyXG4gICAgICBpZiAocy5pbmRleE9mKHNlc3NpZCkgPT0gMCkge1xyXG4gICAgICAgIHJldHVybiBzLnN1YnN0cmluZyhzZXNzaWQubGVuZ3RoLCBzLmxlbmd0aCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBcIlwiO1xyXG4gIH07XHJcbiAgXHJcbiAgaGFzID0gZnVuY3Rpb24oa2V5OiBzdHJpbmcpIHtcclxuICAgIHJldHVybiBnZXQoa2V5KSAhPSBcIlwiID8gdHJ1ZSA6IGZhbHNlO1xyXG4gIH07XHJcbiAgXHJcbiAgc2V0ID0gZnVuY3Rpb24obmFtZTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nLCBleHBpcmVkOiBudW1iZXIgPSAxKSB7XHJcbiAgICBkYXRlLnNldFRpbWUoZGF0ZS5nZXRUaW1lKCkgKyAoZXhwaXJlZCAqIDI0ICogNjAgKiA2MCAqIDEwMDApKTtcclxuICAgIGxldCBleHBpcmVzID0gXCJleHBpcmVzPVwiK2RhdGUudG9VVENTdHJpbmcoKTtcclxuICAgIFxyXG4gICAgZG9jdW1lbnQuY29va2llID0gbmFtZSArIFwiPVwiICsgdmFsdWUgKyBcIjtcIiArIGV4cGlyZXMgKyBcIjtwYXRoPS9cIjtcclxuICB9O1xyXG5cclxuICB1bnNldCA9IGZ1bmN0aW9uKG5hbWU6IHN0cmluZykge1xyXG4gICAgbGV0IHVzZXI6IHN0cmluZyA9IGdldChuYW1lKTtcclxuXHJcbiAgICBpZiAodXNlciAhPSBudWxsIHx8IHVzZXIgIT0gXCJcIikge1xyXG4gICAgICBkb2N1bWVudC5jb29raWUgPSBuYW1lICsgJz0nICsgdXNlciArICc7IGV4cGlyZXM9VGh1LCAwMSBKYW4gMTk3MCAwMDowMDowMCBVVEM7IHBhdGg9LzsnO1xyXG4gICAgfVxyXG4gIH07XHJcbiAgXHJcbiAgcmV0dXJuIHtcclxuICAgIGRlc3Ryb3ksXHJcbiAgICBmbGFzaCxcclxuICAgIGdldCxcclxuICAgIGhhcyxcclxuICAgIHN0YXJ0LFxyXG4gICAgc2V0LFxyXG4gICAgdW5zZXRcclxuICB9O1xyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBTZXNzaW9uOyJdfQ==