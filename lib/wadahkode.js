"use strict";
var http = require('http');
var router = require('./router');
var qs = require('querystring');
var Wadahkode = (function () {
    function Wadahkode() {
        var _this = this;
        this.settings = [];
        this.server = http.createServer(function (req, res) {
            var handler = router.route(req);
            handler.settings(_this.settings);
            if (req.url != '/') {
                switch (req.method) {
                    case 'GET':
                        handler.process(req, res);
                        break;
                    case 'POST':
                        handler.processData(req, res);
                        break;
                }
            }
            else {
                handler.process(req, res);
            }
        });
    }
    Wadahkode.prototype.form = function (req, method) {
        var body = '';
        req.setEncoding('utf-8');
        try {
            req.on('data', function (chunk) { return body += chunk; });
            req.on('end', function () {
                var data = qs.parse(body);
                return method(null, data);
            });
        }
        catch (e) {
            req.on('error', function (error) { return method(error, null); });
        }
    };
    Wadahkode.prototype.get = function (url, method) {
        router.get(url, method);
    };
    Wadahkode.prototype.post = function (url, method) {
        router.post(url, method);
    };
    Wadahkode.prototype.listen = function (port) {
        this.server.listen(port, function () {
            console.log('Server berjalan di http://127.0.0.1:' + port);
        });
    };
    Wadahkode.prototype.set = function (name, value) {
        this.settings[name] = value;
    };
    return Wadahkode;
}());
module.exports = function () { return new Wadahkode(); };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2FkYWhrb2RlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dhZGFoa29kZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsSUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQzdCLElBQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUNuQyxJQUFNLEVBQUUsR0FBRyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUM7QUFRbEM7SUFJRTtRQUFBLGlCQWNDO1FBaEJPLGFBQVEsR0FBa0IsRUFBRSxDQUFDO1FBR25DLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxVQUFDLEdBQVEsRUFBRSxHQUFRO1lBQ2pELElBQU0sT0FBTyxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDbEMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxLQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7WUFFaEMsSUFBSSxHQUFHLENBQUMsR0FBRyxJQUFJLEdBQUcsRUFBRTtnQkFDbEIsUUFBUSxHQUFHLENBQUMsTUFBTSxFQUFFO29CQUNsQixLQUFLLEtBQUs7d0JBQUUsT0FBTyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUMsR0FBRyxDQUFDLENBQUM7d0JBQUMsTUFBTTtvQkFDNUMsS0FBSyxNQUFNO3dCQUFFLE9BQU8sQ0FBQyxXQUFXLENBQUMsR0FBRyxFQUFDLEdBQUcsQ0FBQyxDQUFDO3dCQUFDLE1BQU07aUJBQ2xEO2FBQ0Y7aUJBQU07Z0JBQ0wsT0FBTyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUMsR0FBRyxDQUFDLENBQUM7YUFDMUI7UUFDSCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCx3QkFBSSxHQUFKLFVBQUssR0FBUSxFQUFFLE1BQVc7UUFDeEIsSUFBSSxJQUFJLEdBQVcsRUFBRSxDQUFDO1FBQ3RCLEdBQUcsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFekIsSUFBSTtZQUNGLEdBQUcsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLFVBQUMsS0FBVSxJQUFLLE9BQUEsSUFBSSxJQUFJLEtBQUssRUFBYixDQUFhLENBQUMsQ0FBQztZQUM5QyxHQUFHLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRTtnQkFDWixJQUFJLElBQUksR0FBZSxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUV0QyxPQUFPLE1BQU0sQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDNUIsQ0FBQyxDQUFDLENBQUM7U0FDSjtRQUFDLE9BQU0sQ0FBQyxFQUFFO1lBQ1QsR0FBRyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsVUFBQyxLQUFVLElBQUssT0FBQSxNQUFNLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxFQUFuQixDQUFtQixDQUFDLENBQUM7U0FDdEQ7SUFDSCxDQUFDO0lBRUQsdUJBQUcsR0FBSCxVQUFJLEdBQVcsRUFBRSxNQUFXO1FBQzFCLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3pCLENBQUM7SUFFRCx3QkFBSSxHQUFKLFVBQUssR0FBVyxFQUFFLE1BQVc7UUFDM0IsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDM0IsQ0FBQztJQUVELDBCQUFNLEdBQU4sVUFBTyxJQUFZO1FBQ2pCLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRTtZQUN2QixPQUFPLENBQUMsR0FBRyxDQUFDLHNDQUFzQyxHQUFHLElBQUksQ0FBQyxDQUFDO1FBQzdELENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELHVCQUFHLEdBQUgsVUFBSSxJQUFTLEVBQUUsS0FBYTtRQUMxQixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxHQUFHLEtBQUssQ0FBQztJQUM5QixDQUFDO0lBQ0gsZ0JBQUM7QUFBRCxDQUFDLEFBckRELElBcURDO0FBRUQsTUFBTSxDQUFDLE9BQU8sR0FBRyxjQUFNLE9BQUEsSUFBSSxTQUFTLEVBQUUsRUFBZixDQUFlLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBodHRwID0gcmVxdWlyZSgnaHR0cCcpO1xuY29uc3Qgcm91dGVyID0gcmVxdWlyZSgnLi9yb3V0ZXInKTtcbmNvbnN0IHFzID0gcmVxdWlyZSgncXVlcnlzdHJpbmcnKTtcblxuLyoqXG4gKiBLZWxhcyB1dGFtYVxuICogXG4gKiBAYXV0aG9yIHdhZGFoa29kZSA8bXZwLmRlZGVmaWxhcmFzQGdtYWlsLmNvbT5cbiAqIEBzaW5jZSB2ZXJzaW9uIDEuMC4wXG4gKi9cbmNsYXNzIFdhZGFoa29kZSB7XG4gIHByaXZhdGUgc2VydmVyOiBhbnk7XG4gIHByaXZhdGUgc2V0dGluZ3M6IEFycmF5PHN0cmluZz4gPSBbXTtcbiAgXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuc2VydmVyID0gaHR0cC5jcmVhdGVTZXJ2ZXIoKHJlcTogYW55LCByZXM6IGFueSkgPT4ge1xuICAgICAgY29uc3QgaGFuZGxlciA9IHJvdXRlci5yb3V0ZShyZXEpO1xuICAgICAgaGFuZGxlci5zZXR0aW5ncyh0aGlzLnNldHRpbmdzKTtcbiAgICAgIFxuICAgICAgaWYgKHJlcS51cmwgIT0gJy8nKSB7XG4gICAgICAgIHN3aXRjaCAocmVxLm1ldGhvZCkge1xuICAgICAgICAgIGNhc2UgJ0dFVCc6IGhhbmRsZXIucHJvY2VzcyhyZXEscmVzKTsgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnUE9TVCc6IGhhbmRsZXIucHJvY2Vzc0RhdGEocmVxLHJlcyk7IGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBoYW5kbGVyLnByb2Nlc3MocmVxLHJlcyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgXG4gIGZvcm0ocmVxOiBhbnksIG1ldGhvZDogYW55KSB7XG4gICAgbGV0IGJvZHk6IHN0cmluZyA9ICcnO1xuICAgIHJlcS5zZXRFbmNvZGluZygndXRmLTgnKTtcbiAgICBcbiAgICB0cnkge1xuICAgICAgcmVxLm9uKCdkYXRhJywgKGNodW5rOiBhbnkpID0+IGJvZHkgKz0gY2h1bmspO1xuICAgICAgcmVxLm9uKCdlbmQnLCAoKSA9PiB7XG4gICAgICAgIGxldCBkYXRhOiBBcnJheTxhbnk+ID0gcXMucGFyc2UoYm9keSk7XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gbWV0aG9kKG51bGwsIGRhdGEpO1xuICAgICAgfSk7XG4gICAgfSBjYXRjaChlKSB7XG4gICAgICByZXEub24oJ2Vycm9yJywgKGVycm9yOiBhbnkpID0+IG1ldGhvZChlcnJvciwgbnVsbCkpO1xuICAgIH1cbiAgfVxuICBcbiAgZ2V0KHVybDogc3RyaW5nLCBtZXRob2Q6IGFueSkge1xuICAgIHJvdXRlci5nZXQodXJsLG1ldGhvZCk7XG4gIH1cbiAgXG4gIHBvc3QodXJsOiBzdHJpbmcsIG1ldGhvZDogYW55KSB7XG4gICAgcm91dGVyLnBvc3QodXJsLCBtZXRob2QpO1xuICB9XG4gIFxuICBsaXN0ZW4ocG9ydDogbnVtYmVyKSB7XG4gICAgdGhpcy5zZXJ2ZXIubGlzdGVuKHBvcnQsICgpID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKCdTZXJ2ZXIgYmVyamFsYW4gZGkgaHR0cDovLzEyNy4wLjAuMTonICsgcG9ydCk7XG4gICAgfSk7XG4gIH1cbiAgXG4gIHNldChuYW1lOiBhbnksIHZhbHVlOiBzdHJpbmcpIHtcbiAgICB0aGlzLnNldHRpbmdzW25hbWVdID0gdmFsdWU7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSAoKSA9PiBuZXcgV2FkYWhrb2RlKCk7Il19