"use strict";
var app = require('./v2/app'), wadahkode = function () {
    app.handle = function (req, res) {
        var route = app.route(req);
        if (req.method == 'GET') {
            route.get(req, res);
            console.log('üåè %s %s %s %s', req.method, res.statusCode, new Date(), req.url);
        }
        else if (req.method == 'POST') {
            route.post(req, res);
            console.log('üåè %s %s %s %s', req.method, res.statusCode, new Date(), req.url);
        }
    };
    app.register = {};
    app.Router = {
        get: function (path, callback) { return app.get(path, callback); },
        post: function (path, callback) { return app.post(path, callback); },
    };
    app.Client = {
        initialize: function (options) {
            var dotenv = require('dotenv');
            return dotenv.config(options);
        },
        connect: function () {
            if (process.env.DB_DRIVER == 'postgres') {
                var Client = require('pg').Client;
                var newClient = new Client({
                    connectionString: process.env.DB_DRIVER + "://" + process.env.DB_USER + ":" + process.env.DB_PASS + "@" + process.env.DB_HOST + ":" + process.env.DB_PORT + "/" + process.env.DB_NAME,
                    ssl: {
                        rejectUnauthorized: false
                    }
                });
                this.db = newClient;
                return this;
            }
            else {
                return false;
            }
        }
    };
    return app;
};
module.exports = wadahkode;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2FkYWhrb2RlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dhZGFoa29kZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsSUFBTSxHQUFHLEdBQUcsT0FBTyxDQUFDLFVBQVUsQ0FBQyxFQVMvQixTQUFTLEdBQUc7SUFVVixHQUFHLENBQUMsTUFBTSxHQUFHLFVBQUMsR0FBUSxFQUFFLEdBQVE7UUFDOUIsSUFBTSxLQUFLLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUU3QixJQUFJLEdBQUcsQ0FBQyxNQUFNLElBQUksS0FBSyxFQUFFO1lBQ3ZCLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1lBRXBCLE9BQU8sQ0FBQyxHQUFHLENBQ1QsZ0JBQWdCLEVBQ2hCLEdBQUcsQ0FBQyxNQUFNLEVBQ1YsR0FBRyxDQUFDLFVBQVUsRUFDZCxJQUFJLElBQUksRUFBRSxFQUNWLEdBQUcsQ0FBQyxHQUFHLENBQ1IsQ0FBQztTQUNIO2FBQU0sSUFBSSxHQUFHLENBQUMsTUFBTSxJQUFJLE1BQU0sRUFBRTtZQUMvQixLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztZQUVyQixPQUFPLENBQUMsR0FBRyxDQUNULGdCQUFnQixFQUNoQixHQUFHLENBQUMsTUFBTSxFQUNWLEdBQUcsQ0FBQyxVQUFVLEVBQ2QsSUFBSSxJQUFJLEVBQUUsRUFDVixHQUFHLENBQUMsR0FBRyxDQUNSLENBQUM7U0FDSDtJQUNILENBQUMsQ0FBQztJQUlGLEdBQUcsQ0FBQyxRQUFRLEdBQUcsRUFBRSxDQUFDO0lBRWxCLEdBQUcsQ0FBQyxNQUFNLEdBQUc7UUFDWCxHQUFHLEVBQUUsVUFBQyxJQUFZLEVBQUUsUUFBYSxJQUFLLE9BQUEsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDLEVBQXZCLENBQXVCO1FBQzdELElBQUksRUFBRSxVQUFDLElBQVksRUFBRSxRQUFhLElBQUssT0FBQSxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxRQUFRLENBQUMsRUFBeEIsQ0FBd0I7S0FDaEUsQ0FBQztJQUVGLEdBQUcsQ0FBQyxNQUFNLEdBQUc7UUFDWCxVQUFVLEVBQUUsVUFBUyxPQUFZO1lBQy9CLElBQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUVqQyxPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDaEMsQ0FBQztRQUNELE9BQU8sRUFBRTtZQUNQLElBQUksT0FBTyxDQUFDLEdBQUcsQ0FBQyxTQUFTLElBQUksVUFBVSxFQUFFO2dCQUNoQyxJQUFBLE1BQU0sR0FBSSxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQWpCLENBQWtCO2dCQUUvQixJQUFNLFNBQVMsR0FBRyxJQUFJLE1BQU0sQ0FBQztvQkFDM0IsZ0JBQWdCLEVBQUssT0FBTyxDQUFDLEdBQUcsQ0FBQyxTQUFTLFdBQU0sT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLFNBQUksT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLFNBQUksT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLFNBQUksT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLFNBQUksT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFTO29CQUNqSyxHQUFHLEVBQUU7d0JBQ0gsa0JBQWtCLEVBQUUsS0FBSztxQkFDMUI7aUJBQ0YsQ0FBQyxDQUFDO2dCQUVILElBQUksQ0FBQyxFQUFFLEdBQUcsU0FBUyxDQUFDO2dCQUVwQixPQUFPLElBQUksQ0FBQzthQUNiO2lCQUFNO2dCQUNMLE9BQU8sS0FBSyxDQUFDO2FBQ2Q7UUFDSCxDQUFDO0tBQ0YsQ0FBQztJQUdGLE9BQU8sR0FBRyxDQUFDO0FBQ2IsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE9BQU8sR0FBRyxTQUFTLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBhcHAgPSByZXF1aXJlKCcuL3YyL2FwcCcpLFxuLyoqXG4gKiBGdW5nc2kgV2FkYWhrb2RlXG4gKiBcbiAqIFNlYnVhaCBmdW5nc2kgeWFuZyBkaWd1bmFrYW4gdW50dWsgbWVuYW1wdW5nIHNlYnVhaCBmdW5nc2kgbGFpbi5cbiAqIFxuICogQGF1dGhvciB3YWRhaGtvZGUgPG12cC5kZWRlZmlsYXJhc0BnbWFpbC5jb20+XG4gKiBAc2luY2UgdmVyc2lvbiAxLjAuMFxuICovXG53YWRhaGtvZGUgPSAoKSA9PiB7XG4gIC8qKlxuICAgKiBNZXRvZGUgYXRhdSBwcm9wZXJ0aSB5YW5nIGRpZ3VuYWthbiBrZXRpa2FcbiAgICogd2ViIHNlcnZlciBkaW11YXQgZGVuZ2FuIGFwcC5saXN0ZW4oYXJndW1lbnRzKSxcbiAgICogXG4gICAqIFNlY2FyYSBvdG9tYXRpcyBtZW5hbXB1bmcgcmVxdWVzdCBkYW4gcmVzcG9uc2UgZGFyaSBzZXJ2ZXIsXG4gICAqIGRhbiBtZW5jYXJpIHJvdXRlciB5YW5nIGNvY29rIGJlcmRhc2Fya2FuIHJlcXVlc3QgbWV0aG9kbnlhLlxuICAgKiBcbiAgICogQHNpbmNlIHZlcnNpb24gMS4wLjBcbiAgICovXG4gIGFwcC5oYW5kbGUgPSAocmVxOiBhbnksIHJlczogYW55KSA9PiB7XG4gICAgY29uc3Qgcm91dGUgPSBhcHAucm91dGUocmVxKTtcbiAgICBcbiAgICBpZiAocmVxLm1ldGhvZCA9PSAnR0VUJykge1xuICAgICAgcm91dGUuZ2V0KHJlcSwgcmVzKTtcbiAgICAgIFxuICAgICAgY29uc29sZS5sb2coXG4gICAgICAgICfwn4yPICVzICVzICVzICVzJyxcbiAgICAgICAgcmVxLm1ldGhvZCxcbiAgICAgICAgcmVzLnN0YXR1c0NvZGUsXG4gICAgICAgIG5ldyBEYXRlKCksXG4gICAgICAgIHJlcS51cmxcbiAgICAgICk7XG4gICAgfSBlbHNlIGlmIChyZXEubWV0aG9kID09ICdQT1NUJykge1xuICAgICAgcm91dGUucG9zdChyZXEsIHJlcyk7XG4gICAgICBcbiAgICAgIGNvbnNvbGUubG9nKFxuICAgICAgICAn8J+MjyAlcyAlcyAlcyAlcycsXG4gICAgICAgIHJlcS5tZXRob2QsXG4gICAgICAgIHJlcy5zdGF0dXNDb2RlLFxuICAgICAgICBuZXcgRGF0ZSgpLFxuICAgICAgICByZXEudXJsXG4gICAgICApO1xuICAgIH1cbiAgfTtcbiAgXG4gIC8vIHVudHVrIG1lbmFtcHVuZyByb3V0ZXJcbiAgLy8gbWlzYWxueWE6IFsnLyc6IFtGdW5jdGlvbl1dXG4gIGFwcC5yZWdpc3RlciA9IHt9O1xuICBcbiAgYXBwLlJvdXRlciA9IHtcbiAgICBnZXQ6IChwYXRoOiBzdHJpbmcsIGNhbGxiYWNrOiBhbnkpID0+IGFwcC5nZXQocGF0aCwgY2FsbGJhY2spLFxuICAgIHBvc3Q6IChwYXRoOiBzdHJpbmcsIGNhbGxiYWNrOiBhbnkpID0+IGFwcC5wb3N0KHBhdGgsIGNhbGxiYWNrKSxcbiAgfTtcbiAgXG4gIGFwcC5DbGllbnQgPSB7XG4gICAgaW5pdGlhbGl6ZTogZnVuY3Rpb24ob3B0aW9uczogYW55KSB7XG4gICAgICBjb25zdCBkb3RlbnYgPSByZXF1aXJlKCdkb3RlbnYnKTtcbiAgICAgIFxuICAgICAgcmV0dXJuIGRvdGVudi5jb25maWcob3B0aW9ucyk7XG4gICAgfSxcbiAgICBjb25uZWN0OiBmdW5jdGlvbigpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5EQl9EUklWRVIgPT0gJ3Bvc3RncmVzJykge1xuICAgICAgICBjb25zdCB7Q2xpZW50fSA9IHJlcXVpcmUoJ3BnJyk7XG4gICAgICAgIFxuICAgICAgICBjb25zdCBuZXdDbGllbnQgPSBuZXcgQ2xpZW50KHtcbiAgICAgICAgICBjb25uZWN0aW9uU3RyaW5nOiBgJHtwcm9jZXNzLmVudi5EQl9EUklWRVJ9Oi8vJHtwcm9jZXNzLmVudi5EQl9VU0VSfToke3Byb2Nlc3MuZW52LkRCX1BBU1N9QCR7cHJvY2Vzcy5lbnYuREJfSE9TVH06JHtwcm9jZXNzLmVudi5EQl9QT1JUfS8ke3Byb2Nlc3MuZW52LkRCX05BTUV9YCxcbiAgICAgICAgICBzc2w6IHtcbiAgICAgICAgICAgIHJlamVjdFVuYXV0aG9yaXplZDogZmFsc2VcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgdGhpcy5kYiA9IG5ld0NsaWVudDtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgXG4gIC8vIEtlbWJhbGlrYW5cbiAgcmV0dXJuIGFwcDtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gd2FkYWhrb2RlOyJdfQ==