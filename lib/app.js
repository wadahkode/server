"use strict";
var _a = require("http"), createServer = _a.createServer, IncomingMessage = _a.IncomingMessage, ServerResponse = _a.ServerResponse, parse = require("url").parse, _b = require("path"), extname = _b.extname, join = _b.join, resolve = _b.resolve, _c = require("fs"), lstatSync = _c.lstatSync, readFileSync = _c.readFileSync, view = require("./view"), qs = require("querystring");
var settings = {} || Object.create(null);
module.exports = {
    bodyParser: function (req, callback) {
        var body = "";
        req.setEncoding("utf-8");
        req.on("data", function (chunk) { return (body += chunk); });
        req.on("data", function () { return callback(qs.parse(body)); });
    },
    dirname: function (directory) {
        return resolve(directory);
    },
    get: function (path, method) {
        this.register[path] = this.getRouter(method);
    },
    listen: function () {
        var server = createServer(this.handle);
        return server.listen.apply(server, arguments);
    },
    route: function (req) {
        var url = parse(req.url, true), handler;
        var path = Object.keys(this.register).map(function (item) { return item; });
        path.forEach(function (item) {
            var explodeX = item.split("/");
            var explodeY = req.url.split("/");
            if (item.search(":") > 1 && explodeX.length == explodeY.length) {
                var lastIndex = explodeX.slice(-1)[0];
                req.body = {};
                req.body[lastIndex.replace(":", "")] = explodeY.slice(-1).pop();
                req.body[explodeY.slice(-2)[0]] = item;
                if (item.search(explodeY.slice(-2)[0]) > 1) {
                    url.pathname = item;
                }
            }
        });
        handler = this.register[url.pathname];
        return !handler ? this.missing(req) : handler;
    },
    getRouter: function (method) {
        var app = this;
        return {
            get: function (req, res) {
                res.redirect = function (url) {
                    res.writeHead(301, {
                        "Cache-Control": "no-cache, private, no-store, must-revalidate, max-stale=0, post-check=0, pre-check=0",
                        Location: url,
                    });
                    res.end();
                };
                res.render = function (filename, data, options) {
                    var viewpath = settings.hasOwnProperty("views")
                        ? settings.views
                        : resolve("views"), engine = settings.hasOwnProperty("engine")
                        ? settings.engine
                        : "ejs", stats = lstatSync(join(resolve("node_modules"), engine));
                    filename = join(viewpath, filename + (settings["view extension"] || ".ejs"));
                    var View = new view({
                        filename: filename,
                        engine: stats.isDirectory() ? require(engine) : false,
                        path: viewpath,
                        data: typeof data == undefined ? {} : data,
                        options: typeof options == undefined
                            ? {
                                client: false,
                                strict: true,
                            }
                            : options,
                    });
                    return View.render(function (err, str) {
                        if (!err) {
                            res.write(str);
                            res.end();
                        }
                        else {
                            if (err.code == "ENOENT") {
                                res.write(filename + " tidak dapat ditemukan!");
                                res.end();
                            }
                            else {
                                res.write(err.toString());
                                res.end();
                            }
                        }
                    });
                };
                return method.apply(this, [req, res]);
            },
            post: function (req, res) {
                var _this = this;
                res.redirect = function (url) {
                    res.writeHead(301, {
                        "Cache-Control": "no-cache, private, no-store, must-revalidate, max-stale=0, post-check=0, pre-check=0",
                        Location: url,
                    });
                    res.end();
                };
                res.render = function (filename, data, options) {
                    var viewpath = settings.hasOwnProperty("views")
                        ? settings.views
                        : resolve("views"), engine = settings.hasOwnProperty("engine")
                        ? settings.engine
                        : "ejs", stats = lstatSync(join(resolve("node_modules"), engine));
                    filename = join(viewpath, filename + (settings["view extension"] || ".ejs"));
                    var View = new view({
                        filename: filename,
                        engine: stats.isDirectory() ? require(engine) : false,
                        path: viewpath,
                        data: typeof data == undefined ? {} : data,
                        options: typeof options == undefined
                            ? {
                                client: false,
                                strict: true,
                            }
                            : options,
                    });
                    return View.render(function (err, str) {
                        if (!err) {
                            res.write(str);
                            res.end();
                        }
                        else {
                            if (err.code == "ENOENT") {
                                res.write(filename + " tidak dapat ditemukan!");
                                res.end();
                            }
                            else {
                                res.write(err.toString());
                                res.end();
                            }
                        }
                    });
                };
                if (app.requestMethod != req.method)
                    return app.missingRequestMethod.apply(this, [req, res]);
                app.bodyParser(req, function (result) {
                    req.body = result;
                    return method.apply(_this, [req, res]);
                });
            },
        };
    },
    missing: function (req) {
        var url = parse(req.url, true), filepath = settings.hasOwnProperty("public")
            ? join(settings.public, url.pathname)
            : join(resolve("public"), url.pathname), extension = String(extname(filepath)).toLowerCase(), mimeTypes = {
            ".html": "text/html",
            ".js": "text/javascript",
            ".min.js": "text/javascript",
            ".css": "text/css",
            ".min.css": "text/css",
            ".ico": "image/x-icon",
            ".json": "application/json",
            ".png": "image/png",
            ".jpg": "image/jpg",
            ".gif": "image/gif",
            ".svg": "image/svg+xml",
            ".wav": "audio/wav",
            ".mp4": "video/mp4",
            ".woff": "application/font-woff",
            ".ttf": "application/font-ttf",
            ".eot": "application/vnd.ms-fontobject",
            ".otf": "application/font-otf",
            ".wasm": "application/wasm",
        }, contentType = mimeTypes[extension];
        try {
            var data_1 = readFileSync(filepath);
            return this.getRouter(function (req, res) {
                res.writeHead(200, {
                    "Content-Type": contentType,
                });
                res.write(data_1);
                res.end();
            });
        }
        catch (e) {
            return this.getRouter(function (req, res) {
                res.writeHead(400, {
                    "Content-Type": "text/plain",
                });
                res.write("[" + req.method + "] No route registered for " + url.pathname);
                res.end();
            });
        }
    },
    missingRequestMethod: function (req, res) {
        res.writeHead(400, {
            "Content-Type": "text/plain",
        });
        res.write("Router [" +
            req.method +
            "] diperlukan untuk menangani permintaan url: " +
            req.url);
        res.end();
    },
    post: function (path, method) {
        this.requestMethod = String(this.post.name).toUpperCase();
        this.register[path] = this.getRouter(method);
    },
    use: function () {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        params.reduce(function (key, value) {
            settings[key] = value;
        });
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2FwcC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQU0sSUFBQSxLQUFvRCxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQWpFLFlBQVksa0JBQUEsRUFBRSxlQUFlLHFCQUFBLEVBQUUsY0FBYyxvQkFBQSxFQUNqRCxLQUFLLEdBQUssT0FBTyxDQUFDLEtBQUssQ0FBQyxNQUFuQixFQUNQLEtBQTZCLE9BQU8sQ0FBQyxNQUFNLENBQUMsRUFBMUMsT0FBTyxhQUFBLEVBQUUsSUFBSSxVQUFBLEVBQUUsT0FBTyxhQUFBLEVBQ3hCLEtBQThCLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBekMsU0FBUyxlQUFBLEVBQUUsWUFBWSxrQkFBQSxFQUN6QixJQUFJLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxFQUN4QixFQUFFLEdBQUcsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0FBZTlCLElBQUksUUFBUSxHQUFhLEVBQUUsSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBRW5ELE1BQU0sQ0FBQyxPQUFPLEdBQUc7SUFDZixVQUFVLEVBQUUsVUFDVixHQUEyQixFQUMzQixRQUE0QjtRQUU1QixJQUFJLElBQUksR0FBVyxFQUFFLENBQUM7UUFFdEIsR0FBRyxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUN6QixHQUFHLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxVQUFDLEtBQVksSUFBSyxPQUFBLENBQUMsSUFBSSxJQUFJLEtBQUssQ0FBQyxFQUFmLENBQWUsQ0FBQyxDQUFDO1FBQ2xELEdBQUcsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLGNBQU0sT0FBQSxRQUFRLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUF4QixDQUF3QixDQUFDLENBQUM7SUFDakQsQ0FBQztJQUVELE9BQU8sRUFBRSxVQUFVLFNBQWlCO1FBQ2xD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QUM7Z0JBQ0YsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQ1osQ0FBQyxDQUNGLENBQUM7U0FDSDtJQUNILENBQUM7SUFFRCxvQkFBb0IsRUFBRSxVQUNwQixHQUEyQixFQUMzQixHQUEwQjtRQUUxQixHQUFHLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRTtZQUNqQixjQUFjLEVBQUUsWUFBWTtTQUM3QixDQUFDLENBQUM7UUFDSCxHQUFHLENBQUMsS0FBSyxDQUNQLFVBQVU7WUFDUixHQUFHLENBQUMsTUFBTTtZQUNWLCtDQUErQztZQUMvQyxHQUFHLENBQUMsR0FBRyxDQUNWLENBQUM7UUFDRixHQUFHLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDWixDQUFDO0lBRUQsSUFBSSxFQUFFLFVBQVUsSUFBWSxFQUFFLE1BQWM7UUFDMUMsSUFBSSxDQUFDLGFBQWEsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUMxRCxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDL0MsQ0FBQztJQUVELEdBQUcsRUFBRTtRQUFVLGdCQUF1QjthQUF2QixVQUF1QixFQUF2QixxQkFBdUIsRUFBdkIsSUFBdUI7WUFBdkIsMkJBQXVCOztRQUNwQyxNQUFNLENBQUMsTUFBTSxDQUFDLFVBQVUsR0FBVyxFQUFFLEtBQXNCO1lBQ3pELFFBQVEsQ0FBQyxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUM7UUFDeEIsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0NBQ0YsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHsgY3JlYXRlU2VydmVyLCBJbmNvbWluZ01lc3NhZ2UsIFNlcnZlclJlc3BvbnNlIH0gPSByZXF1aXJlKFwiaHR0cFwiKSxcclxuICB7IHBhcnNlIH0gPSByZXF1aXJlKFwidXJsXCIpLFxyXG4gIHsgZXh0bmFtZSwgam9pbiwgcmVzb2x2ZSB9ID0gcmVxdWlyZShcInBhdGhcIiksXHJcbiAgeyBsc3RhdFN5bmMsIHJlYWRGaWxlU3luYyB9ID0gcmVxdWlyZShcImZzXCIpLFxyXG4gIHZpZXcgPSByZXF1aXJlKFwiLi92aWV3XCIpLFxyXG4gIHFzID0gcmVxdWlyZShcInF1ZXJ5c3RyaW5nXCIpO1xyXG5cclxuLyoqXHJcbiAqIFVzZSBUeXBlXHJcbiAqXHJcbiAqIEBzaW5jZSB2ZXJzaW9uIDEuMS44XHJcbiAqL1xyXG50eXBlIFNldHRpbmdzID0ge307XHJcbnR5cGUgbWV0aG9kID0gKFxyXG4gIHJlcXVlc3Q6IHR5cGVvZiBJbmNvbWluZ01lc3NhZ2UsXHJcbiAgcmVzcG9uc2U6IHR5cGVvZiBTZXJ2ZXJSZXNwb25zZVxyXG4pID0+IHZvaWQ7XHJcbnR5cGUgYm9keVBhcnNlckNhbGxiYWNrID0gKHJlcXVlc3Q6IHR5cGVvZiBxcykgPT4gdm9pZDtcclxudHlwZSBjaHVuayA9IHR5cGVvZiBCdWZmZXI7XHJcblxyXG5sZXQgc2V0dGluZ3MgPSA8U2V0dGluZ3M+e30gfHwgT2JqZWN0LmNyZWF0ZShudWxsKTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG4gIGJvZHlQYXJzZXI6IGZ1bmN0aW9uIChcclxuICAgIHJlcTogdHlwZW9mIEluY29taW5nTWVzc2FnZSxcclxuICAgIGNhbGxiYWNrOiBib2R5UGFyc2VyQ2FsbGJhY2tcclxuICApIHtcclxuICAgIGxldCBib2R5OiBzdHJpbmcgPSBcIlwiO1xyXG5cclxuICAgIHJlcS5zZXRFbmNvZGluZyhcInV0Zi04XCIpO1xyXG4gICAgcmVxLm9uKFwiZGF0YVwiLCAoY2h1bms6IGNodW5rKSA9PiAoYm9keSArPSBjaHVuaykpO1xyXG4gICAgcmVxLm9uKFwiZGF0YVwiLCAoKSA9PiBjYWxsYmFjayhxcy5wYXJzZShib2R5KSkpO1xyXG4gIH0sXHJcblxyXG4gIGRpcm5hbWU6IGZ1bmN0aW9uIChkaXJlY3Rvcnk6IHN0cmluZykge1xyXG4gICAgcmV0dXJuIHJlc29sdmUoZGlyZWN0b3J5KTtcclxuICB9LFxyXG5cclxuICBnZXQ6IGZ1bmN0aW9uIChwYXRoOiBzdHJpbmcsIG1ldGhvZDogbWV0aG9kKSB7XHJcbiAgICB0aGlzLnJlZ2lzdGVyW3BhdGhdID0gdGhpcy5nZXRSb3V0ZXIobWV0aG9kKTtcclxuICB9LFxyXG5cclxuICBsaXN0ZW46IGZ1bmN0aW9uICgpIHtcclxuICAgIGxldCBzZXJ2ZXIgPSBjcmVhdGVTZXJ2ZXIodGhpcy5oYW5kbGUpO1xyXG4gICAgcmV0dXJuIHNlcnZlci5saXN0ZW4uYXBwbHkoc2VydmVyLCBhcmd1bWVudHMpO1xyXG4gIH0sXHJcblxyXG4gIHJvdXRlOiBmdW5jdGlvbiAocmVxOiB0eXBlb2YgSW5jb21pbmdNZXNzYWdlKSB7XHJcbiAgICBsZXQgdXJsOiB0eXBlb2YgcGFyc2UgPSBwYXJzZShyZXEudXJsLCB0cnVlKSxcclxuICAgICAgaGFuZGxlcjogb2JqZWN0IHwgdW5kZWZpbmVkO1xyXG5cclxuICAgIGxldCBwYXRoOiBzdHJpbmdbXSA9IE9iamVjdC5rZXlzKHRoaXMucmVnaXN0ZXIpLm1hcCgoaXRlbSkgPT4gaXRlbSk7XHJcbiAgICBwYXRoLmZvckVhY2goKGl0ZW0pID0+IHtcclxuICAgICAgbGV0IGV4cGxvZGVYOiBzdHJpbmdbXSA9IGl0ZW0uc3BsaXQoXCIvXCIpO1xyXG4gICAgICBsZXQgZXhwbG9kZVk6IHN0cmluZ1tdID0gcmVxLnVybC5zcGxpdChcIi9cIik7XHJcblxyXG4gICAgICBpZiAoaXRlbS5zZWFyY2goXCI6XCIpID4gMSAmJiBleHBsb2RlWC5sZW5ndGggPT0gZXhwbG9kZVkubGVuZ3RoKSB7XHJcbiAgICAgICAgbGV0IFtsYXN0SW5kZXhdID0gZXhwbG9kZVguc2xpY2UoLTEpO1xyXG4gICAgICAgIHJlcS5ib2R5ID0ge307XHJcbiAgICAgICAgcmVxLmJvZHlbbGFzdEluZGV4LnJlcGxhY2UoXCI6XCIsIFwiXCIpXSA9IGV4cGxvZGVZLnNsaWNlKC0xKS5wb3AoKTtcclxuICAgICAgICByZXEuYm9keVtleHBsb2RlWS5zbGljZSgtMilbMF1dID0gaXRlbTtcclxuXHJcbiAgICAgICAgaWYgKGl0ZW0uc2VhcmNoKGV4cGxvZGVZLnNsaWNlKC0yKVswXSkgPiAxKSB7XHJcbiAgICAgICAgICB1cmwucGF0aG5hbWUgPSBpdGVtO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgaGFuZGxlciA9IHRoaXMucmVnaXN0ZXJbdXJsLnBhdGhuYW1lXTtcclxuICAgIHJldHVybiAhaGFuZGxlciA/IHRoaXMubWlzc2luZyhyZXEpIDogaGFuZGxlcjtcclxuICB9LFxyXG5cclxuICBnZXRSb3V0ZXI6IGZ1bmN0aW9uIChtZXRob2Q6IG1ldGhvZCkge1xyXG4gICAgY29uc3QgYXBwID0gdGhpcztcclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAvLyBNZW1wcm9zZXMgbWV0b2RlIEdFVFxyXG4gICAgICBnZXQ6IGZ1bmN0aW9uIChyZXE6IHR5cGVvZiBJbmNvbWluZ01lc3NhZ2UsIHJlczogdHlwZW9mIFNlcnZlclJlc3BvbnNlKSB7XHJcbiAgICAgICAgcmVzLnJlZGlyZWN0ID0gKHVybDogc3RyaW5nKSA9PiB7XHJcbiAgICAgICAgICByZXMud3JpdGVIZWFkKDMwMSwge1xyXG4gICAgICAgICAgICBcIkNhY2hlLUNvbnRyb2xcIjpcclxuICAgICAgICAgICAgICBcIm5vLWNhY2hlLCBwcml2YXRlLCBuby1zdG9yZSwgbXVzdC1yZXZhbGlkYXRlLCBtYXgtc3RhbGU9MCwgcG9zdC1jaGVjaz0wLCBwcmUtY2hlY2s9MFwiLFxyXG4gICAgICAgICAgICBMb2NhdGlvbjogdXJsLFxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgICByZXMuZW5kKCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXMucmVuZGVyID0gKGZpbGVuYW1lOiBzdHJpbmcsIGRhdGE6IFNldHRpbmdzLCBvcHRpb25zOiBTZXR0aW5ncykgPT4ge1xyXG4gICAgICAgICAgbGV0IHZpZXdwYXRoOiBzdHJpbmcgPSBzZXR0aW5ncy5oYXNPd25Qcm9wZXJ0eShcInZpZXdzXCIpXHJcbiAgICAgICAgICAgICAgPyBzZXR0aW5ncy52aWV3c1xyXG4gICAgICAgICAgICAgIDogcmVzb2x2ZShcInZpZXdzXCIpLFxyXG4gICAgICAgICAgICBlbmdpbmU6IHN0cmluZyA9IHNldHRpbmdzLmhhc093blByb3BlcnR5KFwiZW5naW5lXCIpXHJcbiAgICAgICAgICAgICAgPyBzZXR0aW5ncy5lbmdpbmVcclxuICAgICAgICAgICAgICA6IFwiZWpzXCIsXHJcbiAgICAgICAgICAgIHN0YXRzOiB0eXBlb2YgbHN0YXRTeW5jID0gbHN0YXRTeW5jKFxyXG4gICAgICAgICAgICAgIGpvaW4ocmVzb2x2ZShcIm5vZGVfbW9kdWxlc1wiKSwgZW5naW5lKVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgZmlsZW5hbWUgPSBqb2luKFxyXG4gICAgICAgICAgICB2aWV3cGF0aCxcclxuICAgICAgICAgICAgZmlsZW5hbWUgKyAoc2V0dGluZ3NbXCJ2aWV3IGV4dGVuc2lvblwiXSB8fCBcIi5lanNcIilcclxuICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgY29uc3QgVmlldyA9IG5ldyB2aWV3KHtcclxuICAgICAgICAgICAgZmlsZW5hbWUsXHJcbiAgICAgICAgICAgIGVuZ2luZTogc3RhdHMuaXNEaXJlY3RvcnkoKSA/IHJlcXVpcmUoZW5naW5lKSA6IGZhbHNlLFxyXG4gICAgICAgICAgICBwYXRoOiB2aWV3cGF0aCxcclxuICAgICAgICAgICAgZGF0YTogdHlwZW9mIGRhdGEgPT0gdW5kZWZpbmVkID8ge30gOiBkYXRhLFxyXG4gICAgICAgICAgICBvcHRpb25zOlxyXG4gICAgICAgICAgICAgIHR5cGVvZiBvcHRpb25zID09IHVuZGVmaW5lZFxyXG4gICAgICAgICAgICAgICAgPyB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2xpZW50OiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICBzdHJpY3Q6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIDogb3B0aW9ucyxcclxuICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgIHJldHVybiBWaWV3LnJlbmRlcihcclxuICAgICAgICAgICAgKGVycjogb2JqZWN0IHwgbnVsbCB8IGFueSwgc3RyOiBzdHJpbmcgfCB1bmRlZmluZWQgfCBudWxsKSA9PiB7XHJcbiAgICAgICAgICAgICAgaWYgKCFlcnIpIHtcclxuICAgICAgICAgICAgICAgIHJlcy53cml0ZShzdHIpO1xyXG4gICAgICAgICAgICAgICAgcmVzLmVuZCgpO1xyXG4gICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZXJyLmNvZGUgPT0gXCJFTk9FTlRcIikge1xyXG4gICAgICAgICAgICAgICAgICByZXMud3JpdGUoZmlsZW5hbWUgKyBcIiB0aWRhayBkYXBhdCBkaXRlbXVrYW4hXCIpO1xyXG4gICAgICAgICAgICAgICAgICByZXMuZW5kKCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICByZXMud3JpdGUoZXJyLnRvU3RyaW5nKCkpO1xyXG4gICAgICAgICAgICAgICAgICByZXMuZW5kKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICApO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIG1ldGhvZC5hcHBseSh0aGlzLCBbcmVxLCByZXNdKTtcclxuICAgICAgfSxcclxuICAgICAgLy8gTWVtcHJvc2VzIG1ldG9kZSBQT1NUXHJcbiAgICAgIHBvc3Q6IGZ1bmN0aW9uIChyZXE6IHR5cGVvZiBJbmNvbWluZ01lc3NhZ2UsIHJlczogdHlwZW9mIFNlcnZlclJlc3BvbnNlKSB7XHJcbiAgICAgICAgcmVzLnJlZGlyZWN0ID0gKHVybDogc3RyaW5nKSA9PiB7XHJcbiAgICAgICAgICByZXMud3JpdGVIZWFkKDMwMSwge1xyXG4gICAgICAgICAgICBcIkNhY2hlLUNvbnRyb2xcIjpcclxuICAgICAgICAgICAgICBcIm5vLWNhY2hlLCBwcml2YXRlLCBuby1zdG9yZSwgbXVzdC1yZXZhbGlkYXRlLCBtYXgtc3RhbGU9MCwgcG9zdC1jaGVjaz0wLCBwcmUtY2hlY2s9MFwiLFxyXG4gICAgICAgICAgICBMb2NhdGlvbjogdXJsLFxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgICByZXMuZW5kKCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXMucmVuZGVyID0gKGZpbGVuYW1lOiBzdHJpbmcsIGRhdGE6IFNldHRpbmdzLCBvcHRpb25zOiBTZXR0aW5ncykgPT4ge1xyXG4gICAgICAgICAgbGV0IHZpZXdwYXRoOiBzdHJpbmcgPSBzZXR0aW5ncy5oYXNPd25Qcm9wZXJ0eShcInZpZXdzXCIpXHJcbiAgICAgICAgICAgICAgPyBzZXR0aW5ncy52aWV3c1xyXG4gICAgICAgICAgICAgIDogcmVzb2x2ZShcInZpZXdzXCIpLFxyXG4gICAgICAgICAgICBlbmdpbmU6IHN0cmluZyA9IHNldHRpbmdzLmhhc093blByb3BlcnR5KFwiZW5naW5lXCIpXHJcbiAgICAgICAgICAgICAgPyBzZXR0aW5ncy5lbmdpbmVcclxuICAgICAgICAgICAgICA6IFwiZWpzXCIsXHJcbiAgICAgICAgICAgIHN0YXRzOiB0eXBlb2YgbHN0YXRTeW5jID0gbHN0YXRTeW5jKFxyXG4gICAgICAgICAgICAgIGpvaW4ocmVzb2x2ZShcIm5vZGVfbW9kdWxlc1wiKSwgZW5naW5lKVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgZmlsZW5hbWUgPSBqb2luKFxyXG4gICAgICAgICAgICB2aWV3cGF0aCxcclxuICAgICAgICAgICAgZmlsZW5hbWUgKyAoc2V0dGluZ3NbXCJ2aWV3IGV4dGVuc2lvblwiXSB8fCBcIi5lanNcIilcclxuICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgY29uc3QgVmlldyA9IG5ldyB2aWV3KHtcclxuICAgICAgICAgICAgZmlsZW5hbWUsXHJcbiAgICAgICAgICAgIGVuZ2luZTogc3RhdHMuaXNEaXJlY3RvcnkoKSA/IHJlcXVpcmUoZW5naW5lKSA6IGZhbHNlLFxyXG4gICAgICAgICAgICBwYXRoOiB2aWV3cGF0aCxcclxuICAgICAgICAgICAgZGF0YTogdHlwZW9mIGRhdGEgPT0gdW5kZWZpbmVkID8ge30gOiBkYXRhLFxyXG4gICAgICAgICAgICBvcHRpb25zOlxyXG4gICAgICAgICAgICAgIHR5cGVvZiBvcHRpb25zID09IHVuZGVmaW5lZFxyXG4gICAgICAgICAgICAgICAgPyB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2xpZW50OiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICBzdHJpY3Q6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIDogb3B0aW9ucyxcclxuICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgIHJldHVybiBWaWV3LnJlbmRlcihcclxuICAgICAgICAgICAgKGVycjogb2JqZWN0IHwgbnVsbCB8IGFueSwgc3RyOiBzdHJpbmcgfCB1bmRlZmluZWQgfCBudWxsKSA9PiB7XHJcbiAgICAgICAgICAgICAgaWYgKCFlcnIpIHtcclxuICAgICAgICAgICAgICAgIHJlcy53cml0ZShzdHIpO1xyXG4gICAgICAgICAgICAgICAgcmVzLmVuZCgpO1xyXG4gICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZXJyLmNvZGUgPT0gXCJFTk9FTlRcIikge1xyXG4gICAgICAgICAgICAgICAgICByZXMud3JpdGUoZmlsZW5hbWUgKyBcIiB0aWRhayBkYXBhdCBkaXRlbXVrYW4hXCIpO1xyXG4gICAgICAgICAgICAgICAgICByZXMuZW5kKCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICByZXMud3JpdGUoZXJyLnRvU3RyaW5nKCkpO1xyXG4gICAgICAgICAgICAgICAgICByZXMuZW5kKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICApO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGlmIChhcHAucmVxdWVzdE1ldGhvZCAhPSByZXEubWV0aG9kKVxyXG4gICAgICAgICAgcmV0dXJuIGFwcC5taXNzaW5nUmVxdWVzdE1ldGhvZC5hcHBseSh0aGlzLCBbcmVxLCByZXNdKTtcclxuXHJcbiAgICAgICAgYXBwLmJvZHlQYXJzZXIocmVxLCAocmVzdWx0OiBib2R5UGFyc2VyQ2FsbGJhY2spID0+IHtcclxuICAgICAgICAgIHJlcS5ib2R5ID0gcmVzdWx0O1xyXG5cclxuICAgICAgICAgIHJldHVybiBtZXRob2QuYXBwbHkodGhpcywgW3JlcSwgcmVzXSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0sXHJcbiAgICB9O1xyXG4gIH0sXHJcblxyXG4gIG1pc3Npbmc6IGZ1bmN0aW9uIChyZXE6IHR5cGVvZiBJbmNvbWluZ01lc3NhZ2UpIHtcclxuICAgIGNvbnN0IHVybDogdHlwZW9mIHBhcnNlID0gcGFyc2UocmVxLnVybCwgdHJ1ZSksXHJcbiAgICAgIGZpbGVwYXRoOiBzdHJpbmcgPSBzZXR0aW5ncy5oYXNPd25Qcm9wZXJ0eShcInB1YmxpY1wiKVxyXG4gICAgICAgID8gam9pbihzZXR0aW5ncy5wdWJsaWMsIHVybC5wYXRobmFtZSlcclxuICAgICAgICA6IGpvaW4ocmVzb2x2ZShcInB1YmxpY1wiKSwgdXJsLnBhdGhuYW1lKSxcclxuICAgICAgZXh0ZW5zaW9uOiBzdHJpbmcgPSBTdHJpbmcoZXh0bmFtZShmaWxlcGF0aCkpLnRvTG93ZXJDYXNlKCksXHJcbiAgICAgIG1pbWVUeXBlczogb2JqZWN0IHwgYW55ID0ge1xyXG4gICAgICAgIFwiLmh0bWxcIjogXCJ0ZXh0L2h0bWxcIixcclxuICAgICAgICBcIi5qc1wiOiBcInRleHQvamF2YXNjcmlwdFwiLFxyXG4gICAgICAgIFwiLm1pbi5qc1wiOiBcInRleHQvamF2YXNjcmlwdFwiLFxyXG4gICAgICAgIFwiLmNzc1wiOiBcInRleHQvY3NzXCIsXHJcbiAgICAgICAgXCIubWluLmNzc1wiOiBcInRleHQvY3NzXCIsXHJcbiAgICAgICAgXCIuaWNvXCI6IFwiaW1hZ2UveC1pY29uXCIsXHJcbiAgICAgICAgXCIuanNvblwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcclxuICAgICAgICBcIi5wbmdcIjogXCJpbWFnZS9wbmdcIixcclxuICAgICAgICBcIi5qcGdcIjogXCJpbWFnZS9qcGdcIixcclxuICAgICAgICBcIi5naWZcIjogXCJpbWFnZS9naWZcIixcclxuICAgICAgICBcIi5zdmdcIjogXCJpbWFnZS9zdmcreG1sXCIsXHJcbiAgICAgICAgXCIud2F2XCI6IFwiYXVkaW8vd2F2XCIsXHJcbiAgICAgICAgXCIubXA0XCI6IFwidmlkZW8vbXA0XCIsXHJcbiAgICAgICAgXCIud29mZlwiOiBcImFwcGxpY2F0aW9uL2ZvbnQtd29mZlwiLFxyXG4gICAgICAgIFwiLnR0ZlwiOiBcImFwcGxpY2F0aW9uL2ZvbnQtdHRmXCIsXHJcbiAgICAgICAgXCIuZW90XCI6IFwiYXBwbGljYXRpb24vdm5kLm1zLWZvbnRvYmplY3RcIixcclxuICAgICAgICBcIi5vdGZcIjogXCJhcHBsaWNhdGlvbi9mb250LW90ZlwiLFxyXG4gICAgICAgIFwiLndhc21cIjogXCJhcHBsaWNhdGlvbi93YXNtXCIsXHJcbiAgICAgIH0sXHJcbiAgICAgIGNvbnRlbnRUeXBlOiBzdHJpbmcgPSBtaW1lVHlwZXNbZXh0ZW5zaW9uXTtcclxuXHJcbiAgICB0cnkge1xyXG4gICAgICBsZXQgZGF0YTogdHlwZW9mIHJlYWRGaWxlU3luYyA9IHJlYWRGaWxlU3luYyhmaWxlcGF0aCk7XHJcblxyXG4gICAgICByZXR1cm4gdGhpcy5nZXRSb3V0ZXIoXHJcbiAgICAgICAgKHJlcTogdHlwZW9mIEluY29taW5nTWVzc2FnZSwgcmVzOiB0eXBlb2YgU2VydmVyUmVzcG9uc2UpID0+IHtcclxuICAgICAgICAgIHJlcy53cml0ZUhlYWQoMjAwLCB7XHJcbiAgICAgICAgICAgIFwiQ29udGVudC1UeXBlXCI6IGNvbnRlbnRUeXBlLFxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgICByZXMud3JpdGUoZGF0YSk7XHJcbiAgICAgICAgICByZXMuZW5kKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICApO1xyXG4gICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICByZXR1cm4gdGhpcy5nZXRSb3V0ZXIoXHJcbiAgICAgICAgKHJlcTogdHlwZW9mIEluY29taW5nTWVzc2FnZSwgcmVzOiB0eXBlb2YgU2VydmVyUmVzcG9uc2UpID0+IHtcclxuICAgICAgICAgIHJlcy53cml0ZUhlYWQoNDAwLCB7XHJcbiAgICAgICAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwidGV4dC9wbGFpblwiLFxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgICByZXMud3JpdGUoXHJcbiAgICAgICAgICAgIFwiW1wiICsgcmVxLm1ldGhvZCArIFwiXSBObyByb3V0ZSByZWdpc3RlcmVkIGZvciBcIiArIHVybC5wYXRobmFtZVxyXG4gICAgICAgICAgKTtcclxuICAgICAgICAgIHJlcy5lbmQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICk7XHJcbiAgICB9XHJcbiAgfSxcclxuXHJcbiAgbWlzc2luZ1JlcXVlc3RNZXRob2Q6IGZ1bmN0aW9uIChcclxuICAgIHJlcTogdHlwZW9mIEluY29taW5nTWVzc2FnZSxcclxuICAgIHJlczogdHlwZW9mIFNlcnZlclJlc3BvbnNlXHJcbiAgKSB7XHJcbiAgICByZXMud3JpdGVIZWFkKDQwMCwge1xyXG4gICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcInRleHQvcGxhaW5cIixcclxuICAgIH0pO1xyXG4gICAgcmVzLndyaXRlKFxyXG4gICAgICBcIlJvdXRlciBbXCIgK1xyXG4gICAgICAgIHJlcS5tZXRob2QgK1xyXG4gICAgICAgIFwiXSBkaXBlcmx1a2FuIHVudHVrIG1lbmFuZ2FuaSBwZXJtaW50YWFuIHVybDogXCIgK1xyXG4gICAgICAgIHJlcS51cmxcclxuICAgICk7XHJcbiAgICByZXMuZW5kKCk7XHJcbiAgfSxcclxuXHJcbiAgcG9zdDogZnVuY3Rpb24gKHBhdGg6IHN0cmluZywgbWV0aG9kOiBtZXRob2QpIHtcclxuICAgIHRoaXMucmVxdWVzdE1ldGhvZCA9IFN0cmluZyh0aGlzLnBvc3QubmFtZSkudG9VcHBlckNhc2UoKTtcclxuICAgIHRoaXMucmVnaXN0ZXJbcGF0aF0gPSB0aGlzLmdldFJvdXRlcihtZXRob2QpO1xyXG4gIH0sXHJcblxyXG4gIHVzZTogZnVuY3Rpb24gKC4uLnBhcmFtczogb2JqZWN0IHwgYW55KSB7XHJcbiAgICBwYXJhbXMucmVkdWNlKGZ1bmN0aW9uIChrZXk6IHN0cmluZywgdmFsdWU6IHN0cmluZyB8IG9iamVjdCkge1xyXG4gICAgICBzZXR0aW5nc1trZXldID0gdmFsdWU7XHJcbiAgICB9KTtcclxuICB9LFxyXG59O1xyXG4iXX0=