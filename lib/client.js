"use strict";
var dotenv = require('dotenv');
var postgres = require('./databases/postgres');
var firebaseModel = require('./databases/firebase');
var initialize = function (options) { return dotenv.config(options); };
var connect = function (ssl) {
    if (process.env.DB_DRIVER == 'postgres') {
        var Client = require('pg').Client;
        var newClient = new Client({
            connectionString: process.env.DB_DRIVER + "://" + process.env.DB_USER + ":" + process.env.DB_PASS + "@" + process.env.DB_HOST + ":" + process.env.DB_PORT + "/" + process.env.DB_NAME,
            ssl: ssl,
        });
        return new postgres(newClient);
    }
    else if (process.env.DB_DRIVER == 'firebase') {
        var firebase = require('firebase/app');
        require('firebase/auth');
        require('firebase/database');
        var firebaseConfig = {
            apiKey: process.env.API_KEY,
            authDomain: process.env.AUTH_DOMAIN,
            databaseURL: process.env.DATABASE_URL,
            projectId: process.env.PROJECT_ID,
            storageBucket: process.env.STORAGE_BUCKET,
            messagingSenderId: process.env.MESSAGING_SENDER_ID,
            appId: process.env.APP_ID,
            measurementId: process.env.MEASUREMENT_ID,
        };
        var client = firebase.initializeApp(firebaseConfig);
        return new firebaseModel(client);
    }
    else {
        return false;
    }
};
module.exports = {
    connect: connect,
    initialize: initialize,
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xpZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2NsaWVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsSUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQ2pDLElBQU0sUUFBUSxHQUFHLE9BQU8sQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO0FBQ2pELElBQU0sYUFBYSxHQUFHLE9BQU8sQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO0FBUXRELElBQU0sVUFBVSxHQUFHLFVBQUMsT0FBcUIsSUFBSyxPQUFBLE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEVBQXRCLENBQXNCLENBQUM7QUFPckUsSUFBTSxPQUFPLEdBQUcsVUFBVSxHQUF3QjtJQUNoRCxJQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsU0FBUyxJQUFJLFVBQVUsRUFBRTtRQUMvQixJQUFBLE1BQU0sR0FBSyxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQWxCLENBQW1CO1FBRWpDLElBQU0sU0FBUyxHQUFHLElBQUksTUFBTSxDQUFDO1lBQzNCLGdCQUFnQixFQUFLLE9BQU8sQ0FBQyxHQUFHLENBQUMsU0FBUyxXQUFNLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxTQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxTQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxTQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxTQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBUztZQUNqSyxHQUFHLEtBQUE7U0FDSixDQUFDLENBQUM7UUFFSCxPQUFPLElBQUksUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0tBQ2hDO1NBQU0sSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsSUFBSSxVQUFVLEVBQUU7UUFDOUMsSUFBTSxRQUFRLEdBQUcsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQ3pDLE9BQU8sQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUN6QixPQUFPLENBQUMsbUJBQW1CLENBQUMsQ0FBQztRQUU3QixJQUFNLGNBQWMsR0FBRztZQUNyQixNQUFNLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPO1lBQzNCLFVBQVUsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVc7WUFDbkMsV0FBVyxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsWUFBWTtZQUNyQyxTQUFTLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVO1lBQ2pDLGFBQWEsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLGNBQWM7WUFDekMsaUJBQWlCLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxtQkFBbUI7WUFDbEQsS0FBSyxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTTtZQUN6QixhQUFhLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxjQUFjO1NBQzFDLENBQUM7UUFFRixJQUFNLE1BQU0sR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBRXRELE9BQU8sSUFBSSxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUM7S0FDbEM7U0FBTTtRQUNMLE9BQU8sS0FBSyxDQUFDO0tBQ2Q7QUFDSCxDQUFDLENBQUM7QUFHRixNQUFNLENBQUMsT0FBTyxHQUFHO0lBQ2YsT0FBTyxTQUFBO0lBQ1AsVUFBVSxZQUFBO0NBQ1gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGRvdGVudiA9IHJlcXVpcmUoJ2RvdGVudicpO1xyXG5jb25zdCBwb3N0Z3JlcyA9IHJlcXVpcmUoJy4vZGF0YWJhc2VzL3Bvc3RncmVzJyk7XHJcbmNvbnN0IGZpcmViYXNlTW9kZWwgPSByZXF1aXJlKCcuL2RhdGFiYXNlcy9maXJlYmFzZScpO1xyXG5cclxuLyoqXHJcbiAqIENsaWVudCBmb3IgZGF0YWJhc2VcclxuICpcclxuICogQGF1dGhvciB3YWRhaGtvZGUgPG12cC5kZWRlZmlsYXJhc0BnbWFpbC5jb20+XHJcbiAqIEBzaW5jZSB2ZXJzaW9uIDEuMS42XHJcbiAqL1xyXG5jb25zdCBpbml0aWFsaXplID0gKG9wdGlvbnM6IG9iamVjdCB8IGFueSkgPT4gZG90ZW52LmNvbmZpZyhvcHRpb25zKTtcclxuXHJcbi8qKlxyXG4gKiBGdW5nc2kgdW50dWsgbWVuamFsYW5rYW4gYXRhdSBtZW5na29uZWtzaVxyXG4gKlxyXG4gKiBAcGFyYW0gc3NsIG9iamVjdHxhbnl8bnVsbFxyXG4gKi9cclxuY29uc3QgY29ubmVjdCA9IGZ1bmN0aW9uIChzc2w6IG9iamVjdCB8IGFueSB8IG51bGwpIHtcclxuICBpZiAocHJvY2Vzcy5lbnYuREJfRFJJVkVSID09ICdwb3N0Z3JlcycpIHtcclxuICAgIGNvbnN0IHsgQ2xpZW50IH0gPSByZXF1aXJlKCdwZycpO1xyXG5cclxuICAgIGNvbnN0IG5ld0NsaWVudCA9IG5ldyBDbGllbnQoe1xyXG4gICAgICBjb25uZWN0aW9uU3RyaW5nOiBgJHtwcm9jZXNzLmVudi5EQl9EUklWRVJ9Oi8vJHtwcm9jZXNzLmVudi5EQl9VU0VSfToke3Byb2Nlc3MuZW52LkRCX1BBU1N9QCR7cHJvY2Vzcy5lbnYuREJfSE9TVH06JHtwcm9jZXNzLmVudi5EQl9QT1JUfS8ke3Byb2Nlc3MuZW52LkRCX05BTUV9YCxcclxuICAgICAgc3NsLFxyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIG5ldyBwb3N0Z3JlcyhuZXdDbGllbnQpO1xyXG4gIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuREJfRFJJVkVSID09ICdmaXJlYmFzZScpIHtcclxuICAgIGNvbnN0IGZpcmViYXNlID0gcmVxdWlyZSgnZmlyZWJhc2UvYXBwJyk7XHJcbiAgICByZXF1aXJlKCdmaXJlYmFzZS9hdXRoJyk7XHJcbiAgICByZXF1aXJlKCdmaXJlYmFzZS9kYXRhYmFzZScpO1xyXG5cclxuICAgIGNvbnN0IGZpcmViYXNlQ29uZmlnID0ge1xyXG4gICAgICBhcGlLZXk6IHByb2Nlc3MuZW52LkFQSV9LRVksXHJcbiAgICAgIGF1dGhEb21haW46IHByb2Nlc3MuZW52LkFVVEhfRE9NQUlOLFxyXG4gICAgICBkYXRhYmFzZVVSTDogcHJvY2Vzcy5lbnYuREFUQUJBU0VfVVJMLFxyXG4gICAgICBwcm9qZWN0SWQ6IHByb2Nlc3MuZW52LlBST0pFQ1RfSUQsXHJcbiAgICAgIHN0b3JhZ2VCdWNrZXQ6IHByb2Nlc3MuZW52LlNUT1JBR0VfQlVDS0VULFxyXG4gICAgICBtZXNzYWdpbmdTZW5kZXJJZDogcHJvY2Vzcy5lbnYuTUVTU0FHSU5HX1NFTkRFUl9JRCxcclxuICAgICAgYXBwSWQ6IHByb2Nlc3MuZW52LkFQUF9JRCxcclxuICAgICAgbWVhc3VyZW1lbnRJZDogcHJvY2Vzcy5lbnYuTUVBU1VSRU1FTlRfSUQsXHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0IGNsaWVudCA9IGZpcmViYXNlLmluaXRpYWxpemVBcHAoZmlyZWJhc2VDb25maWcpO1xyXG5cclxuICAgIHJldHVybiBuZXcgZmlyZWJhc2VNb2RlbChjbGllbnQpO1xyXG4gIH0gZWxzZSB7XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG59O1xyXG5cclxuLy8gRXhwb3J0XHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG4gIGNvbm5lY3QsXHJcbiAgaW5pdGlhbGl6ZSxcclxufTtcclxuIl19