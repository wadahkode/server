"use strict";
var handlerFactory = require('./handler');
var fs = require('fs');
var path = require('path');
var parser = require('url');
var handlers = {};
exports.clear = function () {
    handlers = {};
};
exports.get = function (url, method) {
    handlers[url] = handlerFactory.createHandler(method);
};
exports.post = function (url, method) {
    handlers[url] = handlerFactory.createHandler(method);
};
exports.route = function (req) {
    var url = parser.parse(req.url, true);
    var handler = handlers[url.pathname];
    if (!handler)
        handler = this.missing(req);
    return handler;
};
exports.missing = function (req) {
    var url = parser.parse(req.url, true);
    var filepath = __dirname + "/public" + url.pathname;
    var extname = String(path.extname(filepath)).toLowerCase();
    var mimeTypes = {
        '.html': 'text/html',
        '.js': 'text/javascript',
        '.css': 'text/css',
        '.ico': 'image/x-icon',
        '.json': 'application/json',
        '.png': 'image/png',
        '.jpg': 'image/jpg',
        '.gif': 'image/gif',
        '.svg': 'image/svg+xml',
        '.wav': 'audio/wav',
        '.mp4': 'video/mp4',
        '.woff': 'application/font-woff',
        '.ttf': 'application/font-ttf',
        '.eot': 'application/vnd.ms-fontobject',
        '.otf': 'application/font-otf',
        '.wasm': 'application/wasm'
    };
    var contentType = mimeTypes[extname];
    try {
        var data_1 = fs.readFileSync(filepath);
        var mime = req.headers.accepts || 'text/html';
        return handlerFactory.createHandler(function (req, res) {
            res.writeHead(200, {
                'Content-Type': contentType
            });
            res.write(data_1);
            res.close();
        });
    }
    catch (e) {
        return handlerFactory.createHandler(function (req, res) {
            res.writeHead(404, { 'Content-Type': 'text/plain' });
            res.write("No route registered for " + url.pathname);
            res.end();
            console.log('üåè %s %s %s %s', req.method, res.statusCode, new Date(), req.url);
        });
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91dGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3JvdXRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsSUFBTSxjQUFjLEdBQUcsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0FBQzVDLElBQU0sRUFBRSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUN6QixJQUFNLElBQUksR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDN0IsSUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQzlCLElBQUksUUFBUSxHQUFRLEVBQUUsQ0FBQztBQUV2QixPQUFPLENBQUMsS0FBSyxHQUFHO0lBQ2QsUUFBUSxHQUFHLEVBQUUsQ0FBQztBQUNoQixDQUFDLENBQUM7QUFFRixPQUFPLENBQUMsR0FBRyxHQUFHLFVBQUMsR0FBVyxFQUFFLE1BQVc7SUFDckMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxHQUFHLGNBQWMsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDdkQsQ0FBQyxDQUFDO0FBRUYsT0FBTyxDQUFDLElBQUksR0FBRyxVQUFDLEdBQVcsRUFBRSxNQUFXO0lBQ3RDLFFBQVEsQ0FBQyxHQUFHLENBQUMsR0FBRyxjQUFjLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ3ZELENBQUMsQ0FBQztBQUVGLE9BQU8sQ0FBQyxLQUFLLEdBQUcsVUFBUyxHQUFRO0lBQy9CLElBQUksR0FBRyxHQUFRLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUMzQyxJQUFJLE9BQU8sR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3JDLElBQUksQ0FBQyxPQUFPO1FBQUUsT0FBTyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDMUMsT0FBTyxPQUFPLENBQUM7QUFDakIsQ0FBQyxDQUFDO0FBRUYsT0FBTyxDQUFDLE9BQU8sR0FBRyxVQUFTLEdBQVE7SUFDakMsSUFBSSxHQUFHLEdBQVEsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQzNDLElBQUksUUFBUSxHQUFXLFNBQVMsR0FBRyxTQUFTLEdBQUcsR0FBRyxDQUFDLFFBQVEsQ0FBQztJQUM1RCxJQUFJLE9BQU8sR0FBVyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQ25FLElBQUksU0FBUyxHQUFRO1FBQ25CLE9BQU8sRUFBRSxXQUFXO1FBQ3BCLEtBQUssRUFBRSxpQkFBaUI7UUFDeEIsTUFBTSxFQUFFLFVBQVU7UUFDbEIsTUFBTSxFQUFFLGNBQWM7UUFDdEIsT0FBTyxFQUFFLGtCQUFrQjtRQUMzQixNQUFNLEVBQUUsV0FBVztRQUNuQixNQUFNLEVBQUUsV0FBVztRQUNuQixNQUFNLEVBQUUsV0FBVztRQUNuQixNQUFNLEVBQUUsZUFBZTtRQUN2QixNQUFNLEVBQUUsV0FBVztRQUNuQixNQUFNLEVBQUUsV0FBVztRQUNuQixPQUFPLEVBQUUsdUJBQXVCO1FBQ2hDLE1BQU0sRUFBRSxzQkFBc0I7UUFDOUIsTUFBTSxFQUFFLCtCQUErQjtRQUN2QyxNQUFNLEVBQUUsc0JBQXNCO1FBQzlCLE9BQU8sRUFBRSxrQkFBa0I7S0FDNUIsQ0FBQztJQUNGLElBQUksV0FBVyxHQUFXLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUU3QyxJQUFJO1FBQ0YsSUFBSSxNQUFJLEdBQVEsRUFBRSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUMxQyxJQUFJLElBQUksR0FBVyxHQUFHLENBQUMsT0FBTyxDQUFDLE9BQU8sSUFBSSxXQUFXLENBQUM7UUFDdEQsT0FBTyxjQUFjLENBQUMsYUFBYSxDQUFDLFVBQVMsR0FBUSxFQUFFLEdBQVE7WUFDN0QsR0FBRyxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUU7Z0JBQ2pCLGNBQWMsRUFBRSxXQUFXO2FBQzVCLENBQUMsQ0FBQztZQUNILEdBQUcsQ0FBQyxLQUFLLENBQUMsTUFBSSxDQUFDLENBQUM7WUFDaEIsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ2QsQ0FBQyxDQUFDLENBQUM7S0FDSjtJQUFDLE9BQU8sQ0FBQyxFQUFFO1FBQ1YsT0FBTyxjQUFjLENBQUMsYUFBYSxDQUFDLFVBQVMsR0FBUSxFQUFFLEdBQVE7WUFDN0QsR0FBRyxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsRUFBQyxjQUFjLEVBQUUsWUFBWSxFQUFDLENBQUMsQ0FBQztZQUNuRCxHQUFHLENBQUMsS0FBSyxDQUFDLDBCQUEwQixHQUFHLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUNyRCxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUM7WUFDVixPQUFPLENBQUMsR0FBRyxDQUNULGdCQUFnQixFQUNoQixHQUFHLENBQUMsTUFBTSxFQUNWLEdBQUcsQ0FBQyxVQUFVLEVBQ2QsSUFBSSxJQUFJLEVBQUUsRUFDVixHQUFHLENBQUMsR0FBRyxDQUNSLENBQUM7UUFDSixDQUFDLENBQUMsQ0FBQztLQUNKO0FBQ0gsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgaGFuZGxlckZhY3RvcnkgPSByZXF1aXJlKCcuL2hhbmRsZXInKTtcbmNvbnN0IGZzID0gcmVxdWlyZSgnZnMnKTtcbmNvbnN0IHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG5jb25zdCBwYXJzZXIgPSByZXF1aXJlKCd1cmwnKTtcbmxldCBoYW5kbGVyczogYW55ID0ge307XG5cbmV4cG9ydHMuY2xlYXIgPSAoKSA9PiB7XG4gIGhhbmRsZXJzID0ge307XG59O1xuXG5leHBvcnRzLmdldCA9ICh1cmw6IHN0cmluZywgbWV0aG9kOiBhbnkpID0+IHtcbiAgaGFuZGxlcnNbdXJsXSA9IGhhbmRsZXJGYWN0b3J5LmNyZWF0ZUhhbmRsZXIobWV0aG9kKTtcbn07XG5cbmV4cG9ydHMucG9zdCA9ICh1cmw6IHN0cmluZywgbWV0aG9kOiBhbnkpID0+IHtcbiAgaGFuZGxlcnNbdXJsXSA9IGhhbmRsZXJGYWN0b3J5LmNyZWF0ZUhhbmRsZXIobWV0aG9kKTtcbn07XG5cbmV4cG9ydHMucm91dGUgPSBmdW5jdGlvbihyZXE6IGFueSkge1xuICBsZXQgdXJsOiBhbnkgPSBwYXJzZXIucGFyc2UocmVxLnVybCwgdHJ1ZSk7XG4gIGxldCBoYW5kbGVyID0gaGFuZGxlcnNbdXJsLnBhdGhuYW1lXTtcbiAgaWYgKCFoYW5kbGVyKSBoYW5kbGVyID0gdGhpcy5taXNzaW5nKHJlcSk7XG4gIHJldHVybiBoYW5kbGVyO1xufTtcblxuZXhwb3J0cy5taXNzaW5nID0gZnVuY3Rpb24ocmVxOiBhbnkpIHtcbiAgbGV0IHVybDogYW55ID0gcGFyc2VyLnBhcnNlKHJlcS51cmwsIHRydWUpO1xuICBsZXQgZmlsZXBhdGg6IHN0cmluZyA9IF9fZGlybmFtZSArIFwiL3B1YmxpY1wiICsgdXJsLnBhdGhuYW1lO1xuICBsZXQgZXh0bmFtZTogc3RyaW5nID0gU3RyaW5nKHBhdGguZXh0bmFtZShmaWxlcGF0aCkpLnRvTG93ZXJDYXNlKCk7XG4gIGxldCBtaW1lVHlwZXM6IGFueSA9IHtcbiAgICAnLmh0bWwnOiAndGV4dC9odG1sJyxcbiAgICAnLmpzJzogJ3RleHQvamF2YXNjcmlwdCcsXG4gICAgJy5jc3MnOiAndGV4dC9jc3MnLFxuICAgICcuaWNvJzogJ2ltYWdlL3gtaWNvbicsXG4gICAgJy5qc29uJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICcucG5nJzogJ2ltYWdlL3BuZycsXG4gICAgJy5qcGcnOiAnaW1hZ2UvanBnJyxcbiAgICAnLmdpZic6ICdpbWFnZS9naWYnLFxuICAgICcuc3ZnJzogJ2ltYWdlL3N2Zyt4bWwnLFxuICAgICcud2F2JzogJ2F1ZGlvL3dhdicsXG4gICAgJy5tcDQnOiAndmlkZW8vbXA0JyxcbiAgICAnLndvZmYnOiAnYXBwbGljYXRpb24vZm9udC13b2ZmJyxcbiAgICAnLnR0Zic6ICdhcHBsaWNhdGlvbi9mb250LXR0ZicsXG4gICAgJy5lb3QnOiAnYXBwbGljYXRpb24vdm5kLm1zLWZvbnRvYmplY3QnLFxuICAgICcub3RmJzogJ2FwcGxpY2F0aW9uL2ZvbnQtb3RmJyxcbiAgICAnLndhc20nOiAnYXBwbGljYXRpb24vd2FzbSdcbiAgfTtcbiAgbGV0IGNvbnRlbnRUeXBlOiBzdHJpbmcgPSBtaW1lVHlwZXNbZXh0bmFtZV07XG4gIFxuICB0cnkgeyAgICBcbiAgICBsZXQgZGF0YTogYW55ID0gZnMucmVhZEZpbGVTeW5jKGZpbGVwYXRoKTtcbiAgICBsZXQgbWltZTogc3RyaW5nID0gcmVxLmhlYWRlcnMuYWNjZXB0cyB8fCAndGV4dC9odG1sJztcbiAgICByZXR1cm4gaGFuZGxlckZhY3RvcnkuY3JlYXRlSGFuZGxlcihmdW5jdGlvbihyZXE6IGFueSwgcmVzOiBhbnkpIHtcbiAgICAgIHJlcy53cml0ZUhlYWQoMjAwLCB7XG4gICAgICAgICdDb250ZW50LVR5cGUnOiBjb250ZW50VHlwZVxuICAgICAgfSk7XG4gICAgICByZXMud3JpdGUoZGF0YSk7XG4gICAgICByZXMuY2xvc2UoKTtcbiAgICB9KTsgICAgICAgIFxuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGhhbmRsZXJGYWN0b3J5LmNyZWF0ZUhhbmRsZXIoZnVuY3Rpb24ocmVxOiBhbnksIHJlczogYW55KSB7XG4gICAgICByZXMud3JpdGVIZWFkKDQwNCwgeydDb250ZW50LVR5cGUnOiAndGV4dC9wbGFpbid9KTtcbiAgICAgIHJlcy53cml0ZShcIk5vIHJvdXRlIHJlZ2lzdGVyZWQgZm9yIFwiICsgdXJsLnBhdGhuYW1lKTtcbiAgICAgIHJlcy5lbmQoKTtcbiAgICAgIGNvbnNvbGUubG9nKFxuICAgICAgICAn8J+MjyAlcyAlcyAlcyAlcycsXG4gICAgICAgIHJlcS5tZXRob2QsXG4gICAgICAgIHJlcy5zdGF0dXNDb2RlLFxuICAgICAgICBuZXcgRGF0ZSgpLFxuICAgICAgICByZXEudXJsXG4gICAgICApO1xuICAgIH0pOyAgICAgIFxuICB9XG59OyJdfQ==